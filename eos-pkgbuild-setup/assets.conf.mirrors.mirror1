#!/bin/bash

# Definitions for the [endeavouros] repo at 'mirrors'.

# Note: this file will be sourced into a function,
# so all variables are made 'local'.

local REPONAME="endeavouros"
local RELEASE_TAGS=(mirror1 mirror2)

# user to sign packages
local SIGNER="EndeavourOS"

# general options
local USE_GENERATED_FILELIST="no"                   # may generate 'repofiles.txt' into the repo
local USE_RELEASE_ASSETS="yes"                      # either 'release assets' or "ordinary" github files

# local folders
local ASSETSDIR="$PWD"
local PKGBUILD_ROOTDIR="$ASSETSDIR/PKGBUILDS"       # temporary copy only, will always be overwritten
local GITDIR="$ASSETSDIR/../../mirrors"             # not $REPONAME...

# package name specifications
local PKGNAMES=(                                    # actually: dir names for packages
    aur/arc-x-icons-theme
    aur/ckbcomp
    aur/downgrade
    aur/inxi
    aur/mkinitcpio-openswap
    aur/paper-icon-theme
    aur/yay
    akm
    endeavouros-keyring
    endeavouros-mirrorlist
    endeavouros-theming
    endeavouros-xfce4-terminal-colors
    eos-base
    eos-bash-shared
    eos-hooks
    eos-log-tool
    eos-rankmirrors
    eos-translations
    eos-update-notifier
    grub-theme-endeavouros
    grub-tools
    keyserver-rank
    nvidia-installer-db
    nvidia-installer
    nvidia-installer-dkms
    pahis
    reflector-auto
    reflector-bash-completion
    reflector-simple
    welcome
)

# Hook functions are run in the beginning after RationalityTests in assets.make.
# There may be several hook functions.
local ASSET_HOOKS=(
    # currently none
)

# Package hooks

# do this for: icon-themes?

_common_show_version() {
    if [ "$localversion" != "$dev_version" ] ; then
        echo -n "[dev=$dev_version] " >&2
    fi
}

_Updpkgsums() {
    local Pkgbuild="$1"
    updpkgsums "$Pkgbuild" 2>/dev/null
}

_Get_pkgver() {
    local Pkgbuild="$1"
    grep "^pkgver=" "$Pkgbuild" | cut -d '=' -f 2 | sed "s|^[\"']\(.*\)[\"']$|\1|"
}

_GetSource0() {
    local Pkgbuild="$1"
    source "$Pkgbuild"
    echo "${source[0]}"
}

_ckbcomp_hook() {
    local tool=ckbcomp
    local Dstdir="$PKGBUILD_ROOTDIR"/$tool
    local Pkgbuild="$Dstdir"/PKGBUILD
    local Url="$(_GetSource0 "$Pkgbuild")"
    Url="$(dirname "$Url")"
    local newinfo="$(wget -q -O- "$Url")"
    local newbase=console-setup_
    local newver="$(echo "$newinfo" | grep $newbase | grep "\.tar\.xz" | tail -n 1 | sed "s|^.*\"$newbase\([0-9\.]*\)\.tar.*$|\1|")"
    local curver="$(_Get_pkgver "$Pkgbuild")"
    local filebase=$newbase$newver

    if [ "$newver" != "$curver" ] ; then
        local ff
        for ff in dsc tar.xz ; do
            wget -q -O "$Dstdir/$filebase.$ff" "$Url"/$filebase.$ff || {
                echo "Error: $tool: fetching $filebase.$ff failed." >&2
                return 1
            }
        done
        local sha256="$(cat "$Dstdir/$filebase.dsc" | grep -A1 ^Checksums-Sha256 | tail -n 1 | awk '{print $1}')"
        echo "$sha256  $Dstdir/$filebase.tar.xz" | sha256sum -c >& /dev/null || {
            echo "Error: $tool: sha256 for $filebase.tar.xz does not match!" >&2
            return 1
        }
        rm -f "$Dstdir/$filebase.dsc"
        sed -i "$Pkgbuild" \
            -e "s|^pkgver=.*|pkgver=$newver|"

        case "$newver" in
            "1.199")
                sed -i "$Pkgbuild"  \
                    -e 's| cd console-setup-${pkgver}$| cd console-setup|'
                ;;
            *)
                sed -i "$Pkgbuild"  \
                    -e 's| cd console-setup$| cd console-setup-$pkgver|'
                ;;
        esac
        updpkgsums "$Pkgbuild" 2>/dev/null
        echo -n "#" >&2
    fi
}

_ckbcomp_hook_change_version_old() {
    # change "$url" http to https
    sed -i "$PKGBUILD_ROOTDIR"/ckbcomp/PKGBUILD \
        -e 's|^url="http:|url="https:|'
}

_yay_hook_check_latest() {
    # check if AUR PKGBUILD has the latest version of yay from the developer
    local tool=yay
    local url=https://github.com/Jguer/$tool/releases
    local tmpdata
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version

    tmpdata="$(wget -q --timeout=10 -O- $url)"
    if [ $? -ne 0 ] ; then
        echo "cannot fetch info about $tool" >&2
        return 1
    fi
    dev_version="$(echo "$tmpdata" | grep /Jguer/yay/tree/v | head -n 1 | sed 's|^.*/tree/v\([0-9\.]*\)" .*$|\1|')"

    _common_show_version
}

_yay_hook_check_latest_old() {
    # check if AUR PKGBUILD has the latest version of yay from the developer
    local tool=yay
    local url=https://github.com/Jguer/$tool/releases
    local tmpfile=$(mktemp)
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version

    wget -q --timeout=10 -O $tmpfile $url || {
        echo "cannot fetch info about $tool" >&2
        rm -f $tmpfile
        return 1
    }
    #dev_version="$(grep "Release v[0-9]" $tmpfile | sed 's|^.*Release v\([0-9\.]*\).*$|\1|')"
    dev_version="$(grep /Jguer/yay/tree/v $tmpfile | head -n 1 | sed 's|^.*/tree/v\([0-9\.]*\)" .*$|\1|')"

    _common_show_version
    rm -f $tmpfile
}

_nvidia-installer-db_hook() {
    nvidia-site-checks-and-update
    return

    # check if Nvidia has changed its driver archive (db) site
    local archive=https://www.nvidia.com/en-us/drivers/unix
    local store="$HOME"/.nvidia-installer/archive.html
    mkdir -p "$(dirname "$store")"
    local tmpfile="$(mktemp "$store".tmp.XXXXX)"

    wget -q -O "$tmpfile" $archive || {
        rm -f "$tmpfile"
        return 1
    }
    if (diff "$tmpfile" "$store" >& /dev/null) ; then
        rm -f "$store".tmp.*  # no diffs
    else
        mv "$store" "$store".tmp
        mv "$tmpfile" "$store"
        mv "$store".tmp "$tmpfile"
        printf "$archive changed! Run nvidia-installer-check to see if there's a problem. " >&2
    fi
}

_inxi_hook_check_latest() {
    # check if AUR PKGBUILD has the latest version of inxi from the developer
    local tool=inxi
    local url=https://github.com/smxi/$tool/releases
    local tmpdata
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version
    local prefer_dev_version=yes

    tmpdata="$(wget -q --timeout=10 -O- $url)"
    if [ $? -ne 0 ] ; then
        echo "cannot fetch info about $tool" >&2
        return 1
    fi
    dev_version="$(echo "$tmpdata" | grep /smxi/inxi/releases/tag/ | head -n 1 | sed 's|^.*/tag/\([0-9\.]*\)-.*$|\1|')"

    if [ "$prefer_dev_version" = "yes" ] ; then
        sed -i $Pkgbuild -e 's|^pkgver='"$localversion"'$|pkgver='"$dev_version"'|'
        echo -n "#" >&2
        _Updpkgsums "$Pkgbuild"
    else
        _common_show_version
    fi
}

_downgrade_hook_check_latest() {
    # check if AUR PKGBUILD has the latest version of downgrade from the developer
    local tool=downgrade
    local url=https://github.com/pbrisbin/$tool/releases
    local tmpdata
    local Pkgbuild="$PKGBUILD_ROOTDIR"/$tool/PKGBUILD
    local localversion=$(_Get_pkgver "$Pkgbuild")
    local dev_version

    tmpdata="$(wget -q --timeout=10 -O- $url)"
    if [ $? -ne 0 ] ; then
        echo "cannot fetch info about $tool" >&2
        return 1
    fi
    dev_version="$(echo "$tmpdata" | grep /pbrisbin/downgrade/releases/tag/v | head -n 1 | sed 's|^.*/tag/v\([0-9\.]*\).*$|\1|')"

    _common_show_version
}

_kalu_hook_fix_files() {
    # fix kalu.install
    sed -i "$PKGBUILD_ROOTDIR"/kalu/kalu.install \
        -e 's| usr/sbin/|/usr/sbin/|'

    # use names instead of numbers in "chown" command
    sed -i "$PKGBUILD_ROOTDIR"/kalu/PKGBUILD \
        -e 's|chown 0:102|chown root:polkitd|' \
        -e 's|^\(pkgrel=[0-9]*\)$|\1.1|'
}
_yad_hook_add_gspell() {
    # add gspell to 'depends', and modify 'pkgver'
    sed -i "$PKGBUILD_ROOTDIR"/yad/PKGBUILD \
        -e 's|^depends=(\([^\)]*\))$|depends=(\1 gspell)|' \
        -e 's|^\(pkgrel=[0-9]*\)$|\1.1|'
}

_diff_file_and_data() {
    local file="$1"
    local data="$2"
    local datafile="$3"
    local retval

    echo "$data" > $datafile
    diff "$file" "$datafile"
}

_eos-bash-shared_hook_check_ksetwallpaper_py() {
    # Check if we have the latest version of file ksetwallpaper.py.
    # See https://github.com/pashazz/ksetwallpaper/raw/master/ksetwallpaper.py

    local file=ksetwallpaper.py
    local url="https://github.com/pashazz/ksetwallpaper/raw/master/$file"
    local current="$PKGBUILD_ROOTDIR"/eos-bash-shared/$file
    local new
    local diffs answer

    new="$(wget -q --timeout=10 -O- "$url")"
    if [ $? -ne 0 ] ; then
        echo "Warning: cannot fetch '$url'." >&2
        return 1
    fi
    if [ "$(cat "$current")" != "$new" ] ; then
        local newfile=$(mktemp)
        diffs="$(_diff_file_and_data "$current" "$new" "$newfile")"
        echo "" >&2
        echo "$diffs" >&2
        echo "" >&2
        read -p "eos-bash-shared: file '$file' differs from current, update (Y/n)? " answer >&2
        case "$answer" in
            "" | [yY]*)
                rm -f $current
                mv $newfile $current
                _Updpkgsums "$current"
                ;;
        esac
        rm -f "$newfile"
    fi
}

declare -A ASSET_PACKAGE_HOOKS
#ASSET_PACKAGE_HOOKS["ckbcomp"]=_ckbcomp_hook_change_version
ASSET_PACKAGE_HOOKS["ckbcomp"]=_ckbcomp_hook
ASSET_PACKAGE_HOOKS["downgrade"]=_downgrade_hook_check_latest
ASSET_PACKAGE_HOOKS["eos-bash-shared"]=_eos-bash-shared_hook_check_ksetwallpaper_py
ASSET_PACKAGE_HOOKS["inxi"]=_inxi_hook_check_latest
ASSET_PACKAGE_HOOKS["kalu"]=_kalu_hook_fix_files
ASSET_PACKAGE_HOOKS["nvidia-installer-db"]=_nvidia-installer-db_hook
ASSET_PACKAGE_HOOKS["yad"]=_yad_hook_add_gspell
ASSET_PACKAGE_HOOKS["yay"]=_yay_hook_check_latest

# Special hooks. Implemented via package hooks.

_assets_download_break() {
    return 0  # same contents under different asset tags, so always break after first download
}
ASSET_PACKAGE_HOOKS["assets_mirrors"]=_assets_download_break
