#!/bin/bash
#
# EOS update notifier for the current user.
#
# The package includes the following files:
#     eos-update-notifier           (this file)
#     eos-update-notifier.desktop   (initializes the systemd service for current user)
#     eos-update-notifier.timer     (systemd timer)
#     eos-update-notifier.service   (systemd service)
#

#######################################################################
EOS_SCRIPTS_DIR=/usr/share/endeavouros/scripts
EOS_SCRIPTS_YAD=eos-script-lib-yad

if [ -r  $EOS_SCRIPTS_DIR/$EOS_SCRIPTS_YAD ] ; then
    source $EOS_SCRIPTS_DIR/$EOS_SCRIPTS_YAD
elif [ -r  $HOME/EOS/PKGBUILDS/welcome/$EOS_SCRIPTS_YAD ] ; then
    source $HOME/EOS/PKGBUILDS/welcome/$EOS_SCRIPTS_YAD                               # TODO: remove this testing code !!!
else
    echo "ERROR: cannot find $EOS_SCRIPTS_YAD"
    exit 1
fi
#######################################################################

RET_QUIT=0
RET_UPDATE=1

Yad() {
    local title
    case "$1" in
        --*) title="EndeavourOS update notifier" ;;
        *) title="$1" ; shift ;;
    esac

    /usr/bin/yad --text-info \
        --title="$title" \
        --height=300 --width=400 \
        --theme="Classic" --tail \
        --button=yad-quit:$RET_QUIT      "$@"
}

Update_common() {
    local updates="$1"
    local source="$2"
    local toolcmd

    case "$source" in
        upstream) toolcmd="pkexec pacman -Syu --noconfirm" ;;
        AUR)      toolcmd="yay -Syua --noconfirm" ;;                             # problem for non-sudoers ...
    esac

    echo "$updates" | \
        Yad "Updates are available from $source" \
            --button=" Update software from $source!face-cool!Start $source updater":$RET_UPDATE

    test $? -eq $RET_UPDATE && {
        eos_yad_RunCmdTermBash "echo Updating from $source... ; $toolcmd && printf '\n$source update done!\n'"
        return 0
    }
}

Main2() {
    local updates_pacman="$(checkupdates)"
    local updates_aur="$(yay -Qua)"

    if [ -z "$updates_pacman" ] && [ -z "$updates_aur" ] ; then
        test "$verbosity" = "high" && {
            # Show the nothing-to-do window.
            echo "No updates available." | \
                Yad --height=100 \
                    --timeout=$no_updates__indicator_wait_time \
                    --timeout-indicator=left &
        }
    else
        # prevent having many update sessions at the same time
        test "$EOS_UPDATER_WINDOW_ON" != "1" && {
            export EOS_UPDATER_WINDOW_ON=1
            # update pacman first!
            test -n "$updates_pacman" && { Update_common "$updates_pacman" upstream || eos_yad_WARN "upstream update failed." ; }
            test -n "$updates_aur"    && { Update_common "$updates_aur"    AUR      || eos_yad_WARN "AUR update failed." ; }
            export EOS_UPDATER_WINDOW_ON=0
        }
    fi
}

Usage() {
    local iwt="$initial_waittime"
    test -z "$iwt" && iwt="[none]"

    local prog_name="$(basename $0)"

    cat <<EOF


Usage: $prog_name [options]

Options:
   -init       Initialize $prog_name systemd service for current user.
   -iw=X       Initial sleep time. Value syntax from 'sleep' program.
               Default: $iwt.
   -mode=X     Operation mode (onetimer or loop).
               Note that the loop mode is not designed for systemd.
               Default: $mode.
   -lwt=X      Loop wait time (only in loop mode). X value is like in 'sleep'.
               Default: $loop_waittime.
   -nw=X       Max time (seconds) to show the "No updates available" window.
               Default: $no_updates__indicator_wait_time.
   -q          Be quieter with dialogs.
EOF
}

Main()
{
    local initial_waittime="5s"
    local loop_waittime=60m
    local no_updates__indicator_wait_time=10
    local verbosity=high
    local mode=onetimer  # "onetimer" or "loop"
    local systemd=0
    local arg

    for arg in "$@" ; do
        case "$arg" in
            -init)
                local progname=eos-update-notifier
                local configdir="$HOME/.config/systemd/user"
                local url=https://github.com/endeavouros-team/PKGBUILDS/raw/master/$progname
                mkdir -p "$configdir"
                if [ ! -r "$configdir"/$progname.service ] || [ ! -r "$configdir"/$progname.timer ]
                then
                    wget -q -O "$configdir"/$progname.service $url/$progname.service
                    wget -q -O "$configdir"/$progname.timer   $url/$progname.timer
                    systemctl --user enable $progname.timer
                    systemctl --user start  $progname.timer
                fi
                echo "$progname service initialized." >&2
                return
                ;;
            -iw=*)
                initial_waittime="$(eos_yad_GetArgVal "$arg")"
                ;;
            -lwt=*)
                loop_waittime="$(eos_yad_GetArgVal "$arg")"
                ;;
            -nw=*)
                no_updates__indicator_wait_time="$(eos_yad_GetArgVal "$arg")"
                ;;
            -q)
                verbosity=low
                ;;
            -systemd)
                systemd=1
                ;;
            -mode=*)
                mode="$(eos_yad_GetArgVal "$arg")"
                case "$mode" in
                    onetimer | loop) ;;
                    *) eos_yad_DIE "Unsupported mode '$mode'." ; break ;;
                esac
                ;;
            -*)
                eos_yad_DIE "Unsupported option '$arg'."
                ;;
            *)
                eos_yad_DIE "Unsupported parameter '$arg'."
                ;;
        esac
    done
    if [ $systemd -eq 1 ] ; then
        # make sure to have proper options when systemd called
        verbosity=low
        mode=onetimer
    fi

    test -n "$initial_waittime" && sleep "$initial_waittime"

    while true ; do
        Main2
        test "$mode" = "onetimer" && break
        sleep "$loop_waittime"
    done
}

Main "$@"
