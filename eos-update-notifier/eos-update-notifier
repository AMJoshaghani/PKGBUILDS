#!/bin/bash
#
# EOS update notifier for the current user.
#
# The package includes the following files:
#     eos-update-notifier           (this file)
#     eos-update-notifier.desktop   (initializes the systemd service for current user)
#     eos-update-notifier.timer     (systemd timer)
#     eos-update-notifier.service   (systemd service)
#

#######################################################################
EOS_SCRIPTS_YAD=/usr/share/endeavouros/scripts/eos-script-lib-yad
test -r  $EOS_SCRIPTS_YAD || {
    echo "ERROR: cannot find $EOS_SCRIPTS_YAD" >&2
    exit 1
}
source $EOS_SCRIPTS_YAD
unset EOS_SCRIPTS_YAD

export -f eos_yad_terminal
export -f eos_yad_check_internet_connection
export -f eos_yad_GetArgVal
export -f eos_yad_RunCmdTermBash
export -f eos_yad_problem
export -f eos_yad_DIE
export -f eos_yad_WARN
#######################################################################


Yad() {
    # NOTE: normal button return value is 0.
    # If user wants other button return values, they MUST be != 0 !!!

    local title

    case "$1" in
        --*) title="EndeavourOS update notifier" ;;
        *) title="$1" ; shift ;;
    esac

    /usr/bin/yad --text-info \
        --title="$title" \
        --height=300 --width=400 \
        --theme="Classic" --tail \
        --button=yad-quit:0             "$@"
}

Update_common() {
    local updates="$1"
    local source="$2"
    local toolcmd

    case "$source" in
        upstream) toolcmd="pkexec pacman -Syu --noconfirm" ;;
        AUR)      toolcmd="yay -Syua --noconfirm" ;;                             # problem for non-sudoers ...
    esac

    echo "$updates" | \
        Yad "Updates are available from $source" \
            --button=" Update software from $source!face-cool!Start $source updater":1  # note: button value must be != 0

    test $? -eq 1 && {
        eos_yad_RunCmdTermBash "echo Updating from $source... ; $toolcmd && printf '\n$source update done!\n'"
        return 0
    }
}

Main2() {
    local CheckAurUpdates=yes
    local CheckArchNewsForYou=yes

    local conf=/etc/eos-update-notifier.conf
    test -r $conf && source $conf

    if [ "$CheckArchNewsForYou" = "yes" ] ; then
        test "$newsdays" -gt 0 && arch-news-for-you $newsdays
    fi

    local updates_pacman="$(checkupdates)"
    local updates_aur=""

    test "$CheckAurUpdates" = "yes" && updates_aur="$(yay -Qua)"

    if [ -z "$updates_pacman" ] && [ -z "$updates_aur" ] ; then
        test "$verbosity" = "high" && {
            # Show the nothing-to-do window.
            echo "No updates available." | \
                Yad --height=100 \
                    --timeout=$no_updates__indicator_wait_time \
                    --timeout-indicator=left &
        }
    else
        # prevent having many update sessions at the same time
        test "$EOS_UPDATER_WINDOW_ON" != "1" && {
            export EOS_UPDATER_WINDOW_ON=1
            # update pacman first!
            test -n "$updates_pacman" && { Update_common "$updates_pacman" upstream || eos_yad_WARN "upstream update failed." ; }
            test -n "$updates_aur"    && { Update_common "$updates_aur"    AUR      || eos_yad_WARN "AUR update failed." ; }
            export EOS_UPDATER_WINDOW_ON=0
        }
    fi
}

Usage() {
    local iwt="$initial_waittime"
    test -z "$iwt" && iwt="[none]"

    local prog_name="$progname"
    test -z "$prog_name" && prog_name="$(basename $0) [basename]"

    cat <<EOF


Usage: $prog_name [options]

Options:
   -init        Initialize $prog_name systemd service for current user.
   -init-force  Same as -init, but may overwrite existing user service files.
   -iw=X        Initial sleep time. Value syntax from 'sleep' program.
                Default: $iwt.
   -mode=X      Operation mode (onetimer or loop).
                Note that the loop mode is not designed for systemd.
                Default: $mode.
   -lwt=X       Loop wait time (only in loop mode). X value is like in 'sleep'.
                Default: $loop_waittime.
   -nw=X        Max time (seconds) to show the "No updates available" window.
                Default: $no_updates__indicator_wait_time.
   -news=X      Show the 'Arch latest news for you' within the last X days.
                If X is 0, then no news are displayed.
                Default: X is $newsdays.
   -q           Be quieter with dialogs.
EOF
}

CheckSums() {
    local configdir="$1"
    local progname="$2"
    local url="$3"
    local sha512sums

    pushd "$configdir" >/dev/null

    # Note: this checking assumes PKGBUILD has certain order in 'source' and 'sha52sums'.
    wget -q --timeout=10 $url/PKGBUILD || \
        eos_yad_DIE "checking sha512sums: wget failed."
    readarray -t sha512sums <<< $(grep -A5 "^sha512sums=" PKGBUILD | tail -n 2 | tr -d "'" | tr -d ')')
    rm -f PKGBUILD
    echo "${sha512sums[0]}  $progname.timer"   | sha512sum -c || \
        eos_yad_DIE "checksum failed for $progname.timer"
    echo "${sha512sums[1]}  $progname.service" | sha512sum -c || \
        eos_yad_DIE "checksum failed for $progname.service"

    popd >/dev/null
}

Main()
{
    local initial_waittime="10s"
    local loop_waittime=60m
    local no_updates__indicator_wait_time=10
    local verbosity=high
    local mode=onetimer  # "onetimer" or "loop"
    local systemd=0
    local newsdays=30
    local arg
    local progname=eos-update-notifier

    for arg in "$@" ; do
        case "$arg" in
            -init | -init-force)
                # initialize service and timer for the current user
                local configdir="$HOME/.config/systemd/user"
                local url=https://github.com/endeavouros-team/PKGBUILDS/raw/master/$progname
                mkdir -p "$configdir"
                if [ ! -r "$configdir"/$progname.service ] || [ ! -r "$configdir"/$progname.timer ] || [ "$arg" = "-init-force" ]
                then
                    # -init-force may bring updated .service and .timer files
                    if [ "$arg" = "-init-force" ] ; then
                        systemctl --user status $progname.timer >/dev/null && {
                            systemctl --user stop    $progname.timer
                            systemctl --user disable $progname.timer
                        }
                    fi
                    wget -q -O "$configdir"/$progname.service $url/$progname.service
                    wget -q -O "$configdir"/$progname.timer   $url/$progname.timer
                    CheckSums "$configdir" "$progname" "$url"
                    systemctl --user enable $progname.timer
                    systemctl --user start  $progname.timer
                fi
                echo "$progname service initialized for user '$(basename "$HOME")'." >&2
                return
                ;;
            -iw=*)
                initial_waittime="$(eos_yad_GetArgVal "$arg")"
                ;;
            -lwt=*)
                loop_waittime="$(eos_yad_GetArgVal "$arg")"
                ;;
            -nw=*)
                no_updates__indicator_wait_time="$(eos_yad_GetArgVal "$arg")"
                ;;
            -news=*)
                newsdays="$(eos_yad_GetArgVal "$arg")"
                ;;
            -q)
                verbosity=low
                ;;
            -systemd)
                systemd=1
                ;;
            -mode=*)
                mode="$(eos_yad_GetArgVal "$arg")"
                case "$mode" in
                    onetimer | loop) ;;
                    *) eos_yad_DIE "Unsupported mode '$mode'." ; break ;;
                esac
                ;;
            -*)
                eos_yad_DIE "Unsupported option '$arg'."
                ;;
            *)
                eos_yad_DIE "Unsupported parameter '$arg'."
                ;;
        esac
    done
    if [ $systemd -eq 1 ] ; then
        # make sure to have proper options when systemd called
        verbosity=low
        mode=onetimer
    fi

    test -n "$initial_waittime" && sleep "$initial_waittime"

    while true ; do
        Main2
        test "$mode" = "onetimer" && break
        sleep "$loop_waittime"
    done
}

Main "$@"
