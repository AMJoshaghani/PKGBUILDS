#!/bin/bash
#
# EOS update notifier for the current user.
#
# The package includes the following files:
#     eos-update-notifier             (this file)
#     eos-update-notifier.conf        (configuration file)
#     eos-update-notifier.desktop     (initializes the systemd service for the current user)
#     eos-update-notifier.service     (systemd service)
#     eos-update-notifier.timer       (systemd timer)
#     /tmp/eos-update-notifier.log.*  (temporary log file, re-created at every invocation)
#     arch-news-for-you               (show Arch news relevant for you)
#     eos-arch-news                   (show Arch news; showing is based on date only)
#

#######################################################################
EOS_SCRIPTS_YAD=/usr/share/endeavouros/scripts/eos-script-lib-yad
test -r  $EOS_SCRIPTS_YAD || {
    echo "ERROR: cannot find $EOS_SCRIPTS_YAD" >&2
    exit 1
}
source $EOS_SCRIPTS_YAD
unset EOS_SCRIPTS_YAD

#export -f eos_yad
export -f eos_yad_terminal
export -f eos_yad_check_internet_connection
export -f eos_yad_GetArgVal
export -f eos_yad_RunCmdTermBash
export -f eos_yad_problem
export -f eos_yad_DIE
export -f eos_yad_WARN
#######################################################################

export EOS_WICON=/usr/share/endeavouros/EndeavourOS-icon.png
export NOTIFIER_LOG_FILE=/tmp/eos-update-notifier.log

eos_yad2() { # TODO: VEKS
    GDK_BACKEND=x11 /usr/bin/yad "$@"
}

eos_un_log() {
    local date="$(date +%Y/%m/%d-%H:%M.%S)"
    echo ""       >> $EOS_UPDATE_NOTIFIER_LOG
    echo "$date"  >> $EOS_UPDATE_NOTIFIER_LOG
    echo "$@"     >> $EOS_UPDATE_NOTIFIER_LOG
}
export -f eos_un_log

echo2() { echo "$@" >&2 ; }
debug() {
    local DEBUG=1
    test "$verbosity" = "low" && DEBUG=0
    test $DEBUG -eq 1 && echo2 "$@"
    eos_un_log "$@"
}
log2() {
    local msg="$1"
    echo2 "$msg"
    echo "$(date '+%x %X%p'): $msg" >> $NOTIFIER_LOG_FILE
}

YadNonFocused() {
    eos_yad2 --form --text="$msg" --window-icon=$EOS_WICON \
             --no-focus --title="Updates available at $date" \
             --geometry=400x${height}+20+20 \
             --button="Dismiss!!Don't update, just close this window":1 \
             --button="Update!!Close this window and update":0 "$@"
}

ShowTray() {
    # Tray notification may have issues on EOS...
    eos_yad2 --notification --image="system-software-update" \
             --text="$count $source updates are available at $date"
}
ShowNotify() {
    local ms=15000
    notify-send --icon=system-software-update --urgency=normal --expire-time=$ms \
                "Updates available at $date" \
                "$count $source updates are available"
}

ShowNonFocused() {
    local date="$(date '+%x %X%p')"
    local source="$1"
    local count="$(echo "$updates" | wc -l)"

    case "$ShowHowAboutUpdates" in
        notify)
            ShowNotify
            return 11   # don't start updating
            ;;
        tray)
            ShowTray
            ;;
        "notify+tray")
            ShowNotify
            ShowTray
            ;;
        window)
            local height limit=400
            local tmp msg

            case "$ShowWhatAboutUpdates" in
                packages)
                    tmp="$(echo "$updates" | sed 's|^|    |')"
                    height=$((10 * count + 120))
                    test $height -gt $limit && height=$limit
                    msg="$(printf "$source updates are available:\n$tmp\n$count updates.\n")"
                    YadNonFocused
                    ;;
                number | *)
                    height=100
                    msg="$(printf "$count $source updates are available.\n")"
                    YadNonFocused
                    ;;
            esac
            ;;
        "")
            log2 "Warning: variable 'ShowHowAboutUpdates' in file $EOS_UPDATE_NOTIFIER_CONF has no value."
            return 11
            ;;
        *)
            log2 "Warning: value '$ShowHowAboutUpdates' for 'ShowHowAboutUpdates' in file $EOS_UPDATE_NOTIFIER_CONF is not supported."
            return 11
            ;;
    esac
}

Update_common() {
    # Check upstream updates first.

    local hasupdates=0
    local source=""
    local cmd=""
    local updates=""
    local previous_check_time=$(date +%s)

    echo2 "Checking for updates ..."
    updates="$(checkupdates)"

    if [ -n "$updates" ] ; then
        if [ $update_focused -eq 0 ] ; then
            ShowNonFocused Upstream || return 1    # returns 252 if window closed from X
            if [ $(( $(date +%s) - previous_check_time )) -gt 60 ] ; then
                # Re-check for updates if more than 60 seconds elapsed from the first check.
                echo2 "Re-checking for updates ..."
                updates="$(checkupdates)"
            fi
        fi
        ((hasupdates++))
        source=upstream
        cmd='echo -n "Updating, root password required. " ; su -c "pacman -Syu"'
        eos_un_log "$source updates available: $updates"
        eos_yad_RunCmdTermBash "echo Updates from $source: ; echo \"$updates\" ; $cmd && printf '\n$source update done!\n' || printf '\n$source update failed.\n'"
    fi

    # Check AUR updates.

    test "$CheckAurUpdates" = "yes" && updates="$(yay -Qua)" || updates=""
    if [ -n "$updates" ] ; then
        if [ $update_focused -eq 0 ] ; then
            ShowNonFocused AUR || return 1
            updates="$(yay -Qua)"    # may have been a long wait...
        fi
        ((hasupdates++))
        cmd="yay -Syua"                                        # potential problem for non-sudoers ...
        source=AUR
        eos_un_log "$source updates available: $updates"
        eos_yad_RunCmdTermBash "echo Updates from $source: ; echo \"$updates\" ; $cmd && printf '\n$source update done!\n' || printf '\n$source update failed.\n'"
    fi

    if [ $hasupdates -eq 0 ] ; then
        local msg="No updates available."
        debug "$msg"
        if [ "$verbosity" = "high" ] ; then
            echo "$msg" | \
                eos_yad2 --text-info --title="EndeavourOS update notifier" --no-focus --window-icon=$EOS_WICON \
                         --height=100 --width=300 --timeout=10 --timeout-indicator=left \
                         --theme="Classic" --tail --button=yad-quit:0
        fi
    fi
}

CheckArchNews() {
    local CheckArchNewsForYou=yes
    local ArchNewsProg=arch-news-for-you          # original default

    test -r $EOS_UPDATE_NOTIFIER_CONF && source $EOS_UPDATE_NOTIFIER_CONF

    if [ "$CheckArchNewsForYou" = "yes" ] ; then
        local tmpdays=hide
        case "$ArchNewsProg" in
            eos-arch-news)
                # eos-arch-news does not (yet) use $newsdays ...
                tmpdays=""
                ;;
            arch-news-for-you)
                if [ "$newsdays" -gt 0 ] ; then
                    tmpdays="$newsdays"
                fi
                ;;
            *)
                log2 "Warning: configuration problem with variable 'ArchNewsProg'. Please check file '$EOS_UPDATE_NOTIFIER_CONF'."
                ;;
        esac
        if [ "$tmpdays" != "hide" ] ; then
            if [ "$verbosity" = "high" ] ; then
                $ArchNewsProg $tmpdays
            else
                $ArchNewsProg $tmpdays 2>/dev/null
            fi
        fi
    fi
}

Main2() {
    local CheckAurUpdates=yes
    local lockfile
    local pids

    CheckArchNews   # also reads config file

    # check package manager lock
    lockfile=/var/lib/pacman/db.lck
    if [ -e $lockfile ] ; then
        debug "Sorry, another program is currently using pacman databases."
        return
    fi
    # check notifier lock
    lockfile=/tmp/.eos-update-notifier.l
    if [ -e "$lockfile" ] ; then
	pids=($(pidof -x $progname))
	if [ "${#pids[@]}" = "1" ] ; then
	    echo2 "Ignoring $progname lockfile (probably a leftover from a previous check)."
	else
            echo2 "Sorry, $progname lockfile exists, already checking for updates?"
	    eos_yad2 --form --title="Warning: $progname blocked?" --image=warning --window-icon=$EOS_WICON \
		     --text="Lockfile for $progname exists.\nIf no other $progname instance is currently checking for updates, you may continue.\nContinue checking?" \
		    --button=yad-no:1 --button=yad-yes:0
	    test $? -ne 0 && return 1
	fi
    fi

    touch "$lockfile"
    Update_common
    rm -f "$lockfile"
}

FetchAndCheck() {
    local configdir="$1"
    local progname="$2"
    local url="$3"
    local sha512sums xx
    local ixt ixs

    pushd "$configdir" >/dev/null

    wget -q --timeout=10 -O $progname.service.pacnew $url/$progname.service || eos_yad_DIE "$FUNCNAME: wget 'service' failed."
    wget -q --timeout=10 -O $progname.timer.pacnew   $url/$progname.timer   || eos_yad_DIE "$FUNCNAME: wget 'timer' failed."
    wget -q --timeout=10 $url/PKGBUILD                                      || eos_yad_DIE "$FUNCNAME: wget 'PKGBUILD' failed."

    source PKGBUILD
    rm -f PKGBUILD

    for ((xx=0; xx < ${#source[@]}; xx++)) ; do
        case "${source[$xx]}" in
            *.timer)   ixt=$xx ;;
            *.service) ixs=$xx ;;
        esac
    done
    
    echo "${sha512sums[$ixt]}  $progname.timer.pacnew"   | sha512sum -c || \
        eos_yad_DIE "$FUNCNAME: checksum failed for the new $progname.timer"
    echo "${sha512sums[$ixs]}  $progname.service.pacnew" | sha512sum -c || \
        eos_yad_DIE "$FUNCNAME: checksum failed for the new $progname.service"

    for xx in timer service ; do
        rm -f $progname.$xx.bak
        test -r $progname.$xx && mv $progname.$xx $progname.$xx.bak
        mv $progname.$xx.pacnew $progname.$xx
    done

    popd >/dev/null
}

CheckInternetConnection() {
    local wait_rounds="$1"
    local one_wait="$2"

    test -z "$wait_rounds" && wait_rounds=8
    test -z "$one_wait"    && one_wait=5s

    # Wait for internet connection max "$wait_rounds * $one_wait" seconds.

    eos_yad_check_internet_connection no_fail_dialog $wait_rounds $one_wait || {
        if [ "$verbosity" = "high" ] ; then
            echo "Internet connection is not available!" | \
                eos_yad_problem "Warning from eos-update-notifier" --width=400 --height=200 &
        fi
        debug "Warning: eos-update-notifier: internet connection is not available!"
        return 1
    }
}

Initialize() {    # initialize service and timer for the current user

    local url=https://github.com/endeavouros-team/PKGBUILDS/raw/master/$progname
    local modify_service=0
    local fetch_files=0

    case "$arg" in
        -init-force | -conf) modify_service=1 ;;
    esac
    if [ ! -r "$configdir"/$progname.service ] || [ ! -r "$configdir"/$progname.timer ] ; then
        fetch_files=1
    fi

    if [ "$fetch_files" = "1" ] || [ "$modify_service" = "1" ]
    then
        systemctl --user status $progname.timer >/dev/null && {
            systemctl --user stop    $progname.timer
            systemctl --user disable $progname.timer
        }
        test "$fetch_files" = "1" && FetchAndCheck "$configdir" "$progname" "$url"
        case "$arg" in
            -conf) sed -i "$configdir"/$progname.timer -e 's|^OnCalendar=.*$|OnCalendar='"$oncalendar"'|' ;;
        esac
        systemctl --user enable $progname.timer
        systemctl --user start  $progname.timer
        debug "New '$configdir/$progname.service' successfully set up."
        debug "New '$configdir/$progname.timer' successfully set up."
        debug "$progname service initialized for user '$(basename "$HOME")'."
    fi
}

Configure() {
    local current_value=$(grep "^OnCalendar=" $configdir/$progname.timer | cut -d '=' -f 2)

    local current_interval=$(echo $current_value | cut -d ':' -f 1 | cut -d '/' -f 2)
    local current_initial=$( echo $current_value | cut -d ':' -f 1 | cut -d '/' -f 1)
    local current_minute=$(  echo $current_value | cut -d ':' -f 2)

    local result retval
    local tips="Tips:\n- <i>Initial hour</i> means the first triggering hour within 24 hours.\n"
    tips+="- <i>Minute offset</i> is the current randomized minute value and cannot be changed.\n"

    result=$(
        eos_yad2 --form --title="Configure update check schedule" --width=400 \
                 --text="$tips" --window-icon=$EOS_WICON \
                 --field="Interval in hours":num           $current_interval \
                 --field="Initial hour":num                $current_initial \
                 --field="Minute offset":ro                $current_minute \
                 --button="Set to defaults":10 --button=yad-cancel:1 --button=yad-ok:0
          )
    retval=$?
    test $retval -eq 1 && return 1

    local new_interval=$(echo "$result" | cut -d '|' -f 1)
    local new_initial=$( echo "$result" | cut -d '|' -f 2)
    local new_minute=$(shuf -i0-59 -n1)                      # try make users start at different times...

    local oncalendar

    case $retval in
        10)
            local default_interval=2
            local default_initial=0
            local default_minute=$(shuf -i0-59 -n1)          # try make users start at different times...

            if [ $new_interval -eq $default_interval ] && [ $new_initial -eq $default_initial ] && [ $new_minute -eq $default_minute ]
            then
                return  # nothing to do
            fi
            oncalendar="$default_initial/$default_interval:$default_minute:00"
            ;;
        0)  
            if [ $new_interval -eq $current_interval ] && [ $new_initial -eq $current_initial ] && [ $new_minute -eq $current_minute ]
            then
                return  # nothing to do
            fi
            oncalendar="$new_initial/$new_interval:$new_minute:00"
            ;;
    esac
    echo2 "New OnCalendar value: $oncalendar"
    Initialize
}

Usage() {
    local iwt="$initial_waittime"
    test -z "$iwt" && iwt="[none]"

    local prog_name="$progname"
    test -z "$prog_name" && prog_name="$(basename $0) [basename]"

    cat <<EOF


Usage: $prog_name [options]

Options:
   -init        Initialize $prog_name systemd service for current user.
   -init-force  Same as -init, but may overwrite existing user service files.
   -conf        Configure the schedule of checking for the updates.
   -show-timer  Show the status of the systemd timer.
   -iw=X        Initial sleep time. Value syntax from 'sleep' program.
                Default: $iwt.
   -mode=X      Operation mode (onetimer or loop).
                Note that the loop mode is not designed for systemd.
                Default: $mode.
   -lwt=X       Loop wait time (only in loop mode). X value is like in 'sleep'.
                Default: $loop_waittime.
   -nw=X        Max time (seconds) to show the "No updates available" window.
                Default: $no_updates__indicator_wait_time.
   -news=X      Show the 'Arch latest news for you' within the last X days.
                If X is 0, then no news are displayed.
                Default: X is $newsdays.
   -q           Be quieter with dialogs.
EOF
}

InitialWait() {
    test -n "$initial_waittime" && {
        #debug "Initial wait for $initial_waittime"
        sleep "$initial_waittime"
    }
}

yad_infomsg() {
    local msg="$1"
    local title="$2"
    test -n "$title" || title="Info"
    echo2 "$title: $msg"
    eos_yad2 --form --text="$msg" --title="$title" --button=yad-ok:0 --image=info
}

Main()
{
    local configdir="$HOME/.config/systemd/user"
    local initial_waittime="5s"  # was 10s
    local loop_waittime=60m
    local no_updates__indicator_wait_time=10
    local verbosity=high
    local mode=onetimer  # "onetimer" or "loop"
    local systemd=0
    local newsdays=30
    local arg
    local progname=eos-update-notifier
    local initialize=""
    local update_focused=0
    local EOS_UPDATE_NOTIFIER_CONF=/etc/eos-update-notifier.conf

    mkdir -p "$configdir"

    rm -f /tmp/$progname.log.*
    export EOS_UPDATE_NOTIFIER_LOG=$(mktemp /tmp/$progname.log.XXXXXXXX)

    for arg in "$@" ; do
        case "$arg" in
            -init | -init-force)
                initialize="$arg"
                ;;
            -conf)
                Configure
                return
                ;;
            -show-timer)
                systemctl --user status eos-update-notifier.timer | cat -
                return
                ;;
            -iw=*)
                initial_waittime="$(eos_yad_GetArgVal "$arg")"
                ;;
            -lwt=*)
                loop_waittime="$(eos_yad_GetArgVal "$arg")"
                ;;
            -nw=*)
                no_updates__indicator_wait_time="$(eos_yad_GetArgVal "$arg")"
                ;;
            -news=*)
                newsdays="$(eos_yad_GetArgVal "$arg")"
                ;;
            -q)
                verbosity=low
                ;;
            -systemd)
                systemd=1
                ;;
            -update-focused)
                # this time we will steal focus (earlier we just showed there are updates)
                update_focused=1
                ;;
            -mode=*)
                mode="$(eos_yad_GetArgVal "$arg")"
                case "$mode" in
                    onetimer | loop) ;;
                    *) eos_yad_DIE "Unsupported mode '$mode'." ; break ;;
                esac
                ;;
            -*)
                eos_yad_DIE "Unsupported option '$arg'."
                ;;
            *)
                eos_yad_DIE "Unsupported parameter '$arg'."
                ;;
        esac
    done
    if [ $systemd -eq 1 ] ; then
        # make sure to have proper options when systemd called
        verbosity=low
        mode=onetimer
    fi

    test "$initialize" != "-init-force" && InitialWait

    # Now internet connection is required.
    CheckInternetConnection || return 1

    case "$initialize" in
        -init-force | -init) Initialize ; return ;;
    esac

    while true ; do
        Main2
        test "$mode" = "onetimer" && break
        sleep "$loop_waittime"
    done
}

Main "$@"
