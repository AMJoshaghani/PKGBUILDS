#!/bin/bash

#
# Simple ranking of mirrors for the EndeavourOS mirrorlist.
#

source /usr/share/endeavouros/scripts/eos-script-lib-yad || return 1
export -f eos_GetArch

echo2()   { echo "$1" >&2 ; }
printf2() { printf "$@" >&2 ; }

verbose() {
    if [ "$verbose" = "yes" ] ; then
        echo2 "  $1"
    fi
}

DeleteTmpFiles() {
    if [ -n "$delete_at_end" ] ; then
        echo2 ""
        verbose "Deleting temporary files: ${delete_at_end[*]}"
        rm -f "${delete_at_end[@]}"
    fi
}
export -f DeleteTmpFiles

DIE() {
    echo2 "$progname: error: $1"
    DeleteTmpFiles
    exit 1
}

ShowArray() {
    local item
    for item in "$@" ; do
        echo $item
    done
}

RankPerTime() {
    # latest_ml : in     # servers not commented!
    # result    : out

    readarray -t result <<< $(/usr/bin/rankmirrors -t --max-time 5 --repo endeavouros $latest_ml | /usr/bin/tail -n +4)
    # - $result will contain an array of lines like:
    #      mirror : time
    # - "time" can be "unreachable", and that line will be in the end of array
    # - $result is sorted based on time, fastest first
}

RankPerAge() {
    # latest_ml : in     # servers not commented!
    # result    : out
    local repo=endeavouros
    local arch=$(eos_GetArch)
    local mirror m m2 nr_time
    local marr
    local sortopts=""
    local sort_rate="-k3,3 -k2r,2"
    local sort_age="-k2r,2 -k3,3"

    case "$sort" in
        rate | fastest | speed)
            sortopts="$sort_rate" ;;
        age | latest)
            sortopts="$sort_age" ;;
        *)
            echo2 "====> value '$sort' of option --sort is unsupported, using 'age'."
            sortopts="$sort_age"
            ;;
    esac

    readarray -t marr <<< $(grep "^Server = " $latest_ml)

    readarray -t result <<< $(
        for mirror in "${marr[@]}" ; do
            m=$(echo "$mirror" | /usr/bin/awk '{print $3}')           # mirror value (with variables)
            verbose "$m"
            m2=$(echo "$m" | /usr/bin/sed 's|/$repo/$arch$||')        # mirror url (without variables)
            GetUpdateNumberAndTime "$m2/state" "$m"                   # update number from "state" and its fetch time
        done | LC_ALL=C /usr/bin/sort -g $sortopts
    )
}

GetUpdateNumberAndTime() {
    local url="$1"
    local mirror="$2"
    local tmpfile="$HOME/.eos-rank-state.123456"
    local result=0
    local time
    local nr

    time=$(curl -Lsm $timeout -w "%{time_total}" "$url" -o"$tmpfile")
    result=$?
    case "$result" in
        0)
            nr="$(cat "$tmpfile" | head -n1)"
            result="$nr $time"
            ;;
        *)
            result=""
            ;;
    esac

    rm -f "$tmpfile"
    
    if [ -n "$result" ] ; then
        echo "$mirror $result"      # "mirror nr time"
    else
        echo2 "====> Fail: $mirror"
    fi
}

FetchLatestMirrorlist() {
    # Grab endeavouros-mirrorlist from the package cache, or fetch it from github/gitlab.

    local pkg=$(ls -1 /var/cache/pacman/pkg/endeavouros-mirrorlist-*.zst 2>/dev/null | tail -n1)
    if [ -n "$pkg" ] ; then
        echo2 "Extracting $pkg ..."
        tar --extract -O -f "$pkg" etc/pacman.d/endeavouros-mirrorlist > $latest_ml
    else
        local url="$(eos-github2gitlab --keep-master "https://raw.githubusercontent.com/endeavouros-team/PKGBUILDS/master/$pkgname/$pkgname")"
        echo2 "Fetching $url ..."
        curl -Lsm $timeout -o $latest_ml $url || DIE "cannot fetch EndeavourOS mirrorlist info!"
    fi
}

SimpleRank() {
    # Rank mirrors from the latest available mirrorlist file.
    #
    # The resulting mirrorlist will contain:
    # - the latest available endeavouros-mirrorlist (mirrors commented out)
    # - the results of ranking
    # - the ranked mirrorlist

    local pkgname=endeavouros-mirrorlist
    local result

    latest_ml=$(/usr/bin/mktemp) ; delete_at_end+=("$latest_ml")

    FetchLatestMirrorlist

    rm -f $latest_ml.orig
    mv $latest_ml $latest_ml.orig
    delete_at_end+=("$latest_ml.orig")
    /usr/bin/cat $latest_ml.orig | grep "^Server[ ]*=" | /usr/bin/sort | /usr/bin/uniq > $latest_ml

    # $result will contain an array of lines like: "mirror update-ordinal fetch-time"
    echo2 "Ranking EndeavourOS mirrors, please wait ..."
    if [ "$use_rankmirrors" = "yes" ] ; then
        RankPerTime
    else
        RankPerAge
    fi

    # show the original list (mirrors commented out)
    /usr/bin/cat $latest_ml.orig | /usr/bin/sed 's|^Server = |#Server = |'

    # show the results of ranking (in comments)
    printf "\n# Results of mirror ranking at (UTC) %s:\n" "$(date -u "+%x %X")"
    printf "# The following fields are shown for each mirror:\n"
    printf "#   mirror:          The mirror address\n"
    printf "#   update-level:    Ordinal number of the latest update (larger is newer)\n"
    printf "#   fetch-time:      Measures the speed of the mirror (smaller is faster)\n"
    printf "#\n"
    while true ; do
        echo "mirror update-level fetch-time"
        echo "~~~~~~ ~~~~~~~~~~~~ ~~~~~~~~~~"
        ShowArray "${result[@]}"
        break
    done | /usr/bin/column -t | /usr/bin/sed 's|^|# |'

    # this is the actual ranked result
    printf "\n# EndeavourOS mirrorlist:\n"
    ShowArray "${result[@]}" | /usr/bin/awk '{print $1}' | /usr/bin/sed 's|^|Server = |'
}

WriteSystemMirrorlist() {
    local eos="$1"
    local new="$2"
    local bak="$eos.$(date +%Y.%m.%d-%H.%M.%S)"
    local eosranked="$eos$ranked_suffix"
    local cmd=""
    local conf=/etc/eos-rankmirrors.conf

    source $conf || {
        echo2 "Config file $conf does not exist!"
        return 1
    }

    if [ "$EOS_AUTO_MIRROR_RANKING" = "yes" ] || [ "$force_rank" = "yes" ] ; then
        printf2 "\nMoving old EndeavourOS mirrorlist to %s.\n" "$bak"
        printf2 "Writing new ranked EndeavourOS mirrorlist to %s.\n" "$eos"
        $EOS_ROOTER "mv $eos $bak ; mv $new $eos ; chown root:root $eos ; chmod 0644 $eos"
    else
        printf2 "\nWriting new ranked EndeavourOS mirrorlist to %s.\n" "$eosranked"
        $EOS_ROOTER "mv $new $eosranked ; chown root:root $eosranked ; chmod 0644 $eosranked"
    fi
}

Options() {
    local opts
    local longopts="verbose,help,_help_,no-save,timeout:,sort:,force-rank"

    opts=$(getopt -o=hnt: --longoptions $longopts --name "$progname" -- "$@")
    case "$?" in
        0) ;;
        *) DIE "getopt detected unsupported option, cannot continue." ;;
    esac

    eval set -- "$opts"

    while true ; do
        case "$1" in
            --_help_)
                cat <<EOF
Usage: $progname [options]

Options:
  --sort <value>
             Primary key for sorting the mirrors.
             Supported key values:
                 age     (latest first)
                 rate    (fastest first)
             Default: $sort_default.

  --timeout <value>
  -t <value>
             Set the timeout value (in seconds) for checking a mirror.
             Default: $timeout_default.

  --no-save
  -n
             Don't save the generated mirrorlist.

  --verbose
             Show more detailed output.

  --help
  -h
             This help.
EOF
                ;;
            --help | -h)
                $FUNCNAME --_help_
                exit 0
                ;;

            --sort)
                sort="$2" ; shift ;;
            --timeout | -t)
                timeout="$2" ; shift ;;
            --verbose)
                verbose=yes ;;
            --no-save | -n)
                save=no
                ;;
            --force-rank)
                force_rank=yes
                ;;
            --)
                shift ; break ;;
        esac
        shift
    done
}

Main()
{
    local progname="$(basename "$0")"
    local pkgname=endeavouros-mirrorlist
    local mlfolder=/etc/pacman.d
    local eos=$mlfolder/$pkgname
    local new=""
    local latest_ml=""
    local delete_at_end=()
    local arg
    local timeout_default=20                  # in seconds
    local sort_default=age                    # age or rate
    local use_rankmirrors=no
    local force_rank=no
    local save=yes
    local ranked_suffix=".pacnew"             # was: ".ranked"  !!!

    # option-related variables
    local verbose=no
    local timeout=$timeout_default
    local sort=$sort_default

    Options "$@"

    if [ ! -r "$eos" ] ; then               # this test is not really needed...
        DIE "no local mirrorlist found, please install package '$pkgname'."
    fi
    if [ "$use_rankmirrors" = "yes" ] && [ ! -x /usr/bin/rankmirrors ] ; then
        DIE "ranking failed because package 'pacman-contrib' is not installed."
    fi

    new=$(/usr/bin/mktemp) ; delete_at_end+=("$new")

    SimpleRank > $new
    cat $new

    if [ -z "$(grep "^Server = " $new)" ] ; then
        DIE "ranking failed, no mirrors found!"
    fi

    if [ "$save" = "yes" ] ; then
        WriteSystemMirrorlist "$eos" "$new"
    fi

    DeleteTmpFiles
}

trap "sleep 0.2 ; DeleteTmpFiles" EXIT

Main "$@"
