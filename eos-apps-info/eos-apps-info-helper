#!/bin/bash

# Show man page from (Arch) web.
# Additionally show info from names that have no man page.

echo2() { echo "$@" >&2 ; }

Usage() {
    cat <<EOF >&2
Usage: $progname [basic-options] name
       $progname help-options

Name:
    The name for which the manual page or other info is searched.

Basic-options:
    --find-other-info   Find other info if man page doesn't exist.
    --skip-other-info   Don't find other info if man page doesn't exist (default).

Help-options:
    -h | --help              This help.

Config file $real_progname.conf is searched from the following folders in this order:
    ~/.config/$real_progname
    /etc/$real_progname

Config file may contain variables:
    EOS_APPS_INFO_BROWSER=<name-of-web-browser>
    EOS_APPS_INFO_BROWSER_OPTS="<browser-options>"

Web page infos can be written info folder 'pageinfo' under a config file folder (see above).
Web page info files can be:
    <name>.url          Contains one URL to the <name> info page.
    <name>.helpcmd      Contains a command to show help for <name>.

EOF
}

URL_from_package() {
    local pkgname="$1"
    local opt
    local prog
    for prog in /usr/bin/yay ; do
        for opt in "-Qi" "-Si" ; do
	    url="$(LANG=C $prog $opt "$pkgname" 2>/dev/null | grep -w ^URL | head -n1 | awk '{print $NF}')"
	    if [ -n "$url" ] ; then
	        return
	    fi
        done
    done
}

URL_from_arch_man() {
    # Find the section of the Arch man page

    local section=$(/usr/bin/man -w "$name" 2>/dev/null | /usr/bin/sed 's|.*\.\([0-9]*\)\.gz|\1|')
    if [ -n "$section" ] ; then
        url="https://man.archlinux.org/man/$name.$section"
    fi
}

URL_from_bonus() {
    # in: $name
    # out: $url

    # ad hoc urls. See option --show-bonus above.
    case "$name" in
        bashdb)
            if [ "$SUPPORT_MAN_BASHDB" = "yes" ] ; then
                # Fetch the http document to your home folder
                url="$HOME/.config/$real_progname/bashdb.html"
                if [ ! -r "$url" ] ; then
                    local url2=http://bashdb.sourceforge.net/bashdb.html
                    mkdir -p "$(dirname "$url")"
                    wget --user-agent="" -q --timeout=10 -O "$url" $url2 || url=""
                fi
            fi
            ;;
        grub)          url=https://www.gnu.org/software/grub/manual/grub/grub.html;;
        #libreoffice)  url=https://documentation.libreoffice.org/en/english-documentation;;
        linux)         url=https://www.kernel.org;;
        linux-lts)     url=https://www.kernel.org;;
        nvidia)        url=https://www.nvidia.com/en-us/drivers/unix;;
        virtualbox)    url=https://www.virtualbox.org/manual/UserManual.html;;
    esac
}

GetConfigs() {
    # Get configured values
    for folder in "${folders[@]}" ; do
        if [ -r $folder/$real_progname.conf ] ; then
            source $folder/$real_progname.conf 2>/dev/null && {
                if [ -n "$EOS_APPS_INFO_BROWSER" ]; then
                    br="$EOS_APPS_INFO_BROWSER"
                    if [ -n "$(which "$br" 2>/dev/null)" ]; then
                        if [ -n "$EOS_APPS_INFO_BROWSER_OPTS" ]; then
                            br+=" $EOS_APPS_INFO_BROWSER_OPTS"
                        fi
                    else
                        echo2 "Browser '$br' not found, using default $br_default."
                        br="$br_default"
                    fi
                fi
            }
            break
        fi
    done
}

Options() {
    local arg

    for arg in "$@" ; do
        case "$arg" in
            -h | --help)
                Usage
                exit
                ;;
            --return-url)
                return_url=yes
                ;;
            --find-other-info)
                find_other_info=yes
                ;;
            --skip-other-info)
                find_other_info=no
                ;;
            --show-system-folder)
                echo "${folders[1]}"   # for bash completion
                exit
                ;;
            --show-bonus)
                echo "grub linux linux-lts nvidia virtualbox"  # supported bonus apps!
                exit
                ;;
            -* )
                echo "Sorry, option '$arg' is not supported."; exit 1
                ;;
            *)
                name="$arg"
                ;;
        esac
    done

    # check mandatory params
    if [ -z "$name" ] ; then
        echo2 "Error: give command name"
        exit 1
    fi
}


Main()
{
    local progname="$(basename "$0")"
    local real_progname=${progname%-helper}
    local name=""
    local find_other_info=yes   # default: will find other web info if $name has no man page
    local return_url=no

    local folders=(
        $HOME/.config/$real_progname
        /etc/$real_progname
    )
    local folder
    local url=""
    local br_default="/usr/bin/xdg-open"
    local br="$br_default"
    local EOS_APPS_INFO_BROWSER=""
    local dir

    Options "$@"

    GetConfigs

    # find the URL
    for folder in "${folders[@]}" ; do
        dir="$folder/pageinfo"
        if [ -r "$dir/$name/$name.html" ] ; then
            url="$dir/$name/$name.html"
            break
        elif [ -r "$dir/$name.url" ] ; then
            url=$(/usr/bin/cat "$dir/$name.url")
            echo2 "==> '$url'"
            break
        elif [ -x "$dir/$name.helpcmd" ] ; then
            url="$("$dir/$name.helpcmd")"
            [ -z "$url" ] && return
        fi
    done
    [ -z "$url" ] && URL_from_bonus
    [ -z "$url" ] && URL_from_arch_man "$name"
    [ -z "$url" ] && URL_from_package "$name"

    if [ -n "$url" ] ; then
        if [ "$return_url" = "yes" ] ; then
            echo "$url"
        else
            /usr/bin/setsid $br "$url" 2>/dev/null &
        fi
    else
        echo2 "Sorry, no info found."
    fi
}

Main "$@"
