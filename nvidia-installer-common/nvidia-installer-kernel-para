#!/bin/bash

# Add or remove a kernel parameter for grub or sd-boot

Info() { echo "==> $progname: info:" "$@" ; }

DIE() {
    echo "==> $progname: error: $@" >&2
    exit 1
}

SetKernelParameterGrub() {
    local file=/etc/default/grub
    [ -r $file ] || return                                              # return if grub not used
    local varname="GRUB_CMDLINE_LINUX_DEFAULT"
    local currline="$(grep ^"$varname"= $file | grep "$kernel_param")"

    if [ -n "$currline" ] ; then
        case "$mode" in
            add)
                Info "already set: '$currline'"
                exit 1    # nothing changed
                ;;
            remove)
                Info "removing kernel parameter $kernel_param"
                # first sed change below fails if $pname=$pvalue is first
                sed -i $file \
                    -e "s|^\($varname=\".*\) $kernel_param\(.*\)$|\1\2|" \
                    -e "s|^\($varname=\".*\)$kernel_param \(.*\)$|\1\2|"
                ;;
        esac
    else
        case "$mode" in
            add)
                Info "adding kernel parameter $kernel_param"
                sed -i $file -e "s|^\($varname=\".*\)\"$|\1 $kernel_param\"|"
                ;;
            remove)
                currline="$(grep ^"$varname"= $file)"
                Info "already removed: '$currline'"
                exit 1    # nothing changed
                ;;
        esac
    fi
    cat <<EOF >&2
Info: kernel parameters for grub will be changed by $progname, so it is advisable to run commands:
    grub-mkconfig -o $grubcnf
    grub-install (with proper parameters for your system!)
EOF
    exit 0 # parameter changed
}

SetKernelParameterSdboot() {
    local file=/etc/kernel/cmdline
    [ -r $file ] || return                                              # return if sd-boot not used

    local paramline=$(grep "$kernel_param" $file)

    case "$mode" in
        add)
            [ "$paramline" != "" ] && exit 1                            # 1 = nothing changed
            Info "adding kernel parameter: $kernel_param"
            if [ "$(stat -c %s $file)" = "0" ] ; then
                echo "$kernel_param" > $file
            else
                sed -E -i $file -e "s|([ \t]*[^#].*)|$kernel_param \1|"     # insert to a non-comment line
            fi
            ;;
        remove)
            [ "$paramline" = "" ] && exit 1                             # 1 = nothing changed
            Info "removing kernel parameter: $kernel_param"
            sed -E -i $file -e "s|$kernel_param[ ]{0,1}||g"
            ;;
    esac

    [ "$ccs" = "no" ] && reinstall-kernels    # run reinstall-kernels only if not called from ccs
    exit 0   # parameter changed
}

Options() {
    local opts

    opts="$(/usr/bin/getopt -o=h --longoptions help,ccs --name "$progname" -- "$@")" || {
        Options --help
        return 1
    }

    eval set -- "$opts"

    while true ; do
        case "$1" in
            --ccs) ccs=yes ;;

            --) shift ; break ;;

            -h | --help)
                cat <<EOF >&2
Usage: $progname [options] kernel-parameter [mode]
Options:
  --ccs               Calling from the CCS (chrooted_cleaner_script.sh).
Parameters:
  kernel-parameter    A kernel parameter, e.g. "nvidia-drm.modeset=1".
  mode                Operation: "add" (=default) or "remove".
EOF
                exit 0
                ;;
            *)
                ;;
        esac
        shift
    done
    kernel_param="$1"
    mode="$2"
}

Main() {
    local progname="$(basename "$0")"
    # exit value:
    #   0 = parameter was added
    #   * = parameter was not added (already exists or a failure)

    local kernel_param=""
    local mode=""               # optional: add (default) or remove

    # variables to store option values
    local ccs=no

    Options "$@" || return 1

    # check given parameters
    [ "$kernel_param" = "" ] && DIE "kernel parameter is required but missing"
    case "$mode" in
        add | remove) ;;
        "") mode=add ;;
        *) DIE "$progname: error: value '$mode' for the second parameter is not supported" ;;
    esac

    SetKernelParameterSdboot      # exits if using sd-boot
    SetKernelParameterGrub        # exits if using grub

    Info "sd-boot or grub not in use"
}

Main "$@"
