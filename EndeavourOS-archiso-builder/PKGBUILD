#!/bin/bash

# Maintainer: EndeavourOS-Team <info@endeavouros.com>

pkgname=EndeavourOS-archiso
pkgver=0.8.1
pkgrel=1
pkgdesc="Build EndeavourOS-archiso"
arch=(any)
makedepends=(archiso mkinitcpio-archiso git squashfs-tools)
source=(git+https://github.com/endeavouros-team/EndeavourOS-archiso.git)
sha512sums=('SKIP')


_check_repo_in_pacman_conf() {
    local reponame="endeavouros_calamares"
    local conf=/etc/pacman.conf

    if [ -z "$(grep "^\[$reponame\]$" $conf)" ] ; then
        echo "Sorry, repo [$reponame] is not found in $conf." >&2
        read -p "Add it now and update system (Y/n)? " >&2
        case "$REPLY" in
            [yY]* | "")
                local conftmp="$(mktemp -u "$HOME"/pacman.conf.tmp.XXXX)"
                cp $conf $conftmp
                cat <<EOF >> $conftmp

[$reponame]
Server = https://github.com/endeavouros-team/mirrors/releases/download/\$repo
EOF
                sudo cp $conftmp $conf || { rm -f $conftmp ; return 1 ; }
                rm -f $conftmp
                ;;
            *)
                return 1
                ;;
        esac
    fi
}

_create_cleanup_script() {
    # There may be lots of files to delete:
    local installer_files=(
        cleaner_script.sh chrooted_cleaner_script.sh calamares_switcher update-mirrorlist
        pacstrap_calamares calamares_for_testers rank_pacman_key.sh
    )
    local file=run_before_squashfs.sh
    if [ -r $file ] ; then
        installer_files=($(grep "^mv " $file | grep "/usr/bin/$" | sed -e 's|^mv ||' -e 's| /usr/bin/$||'))
    fi
    installer_files+=(update-mirrorlist)

    cat <<EOF > "$cleanup"
#!/bin/bash
sudo rm -f  $build_rootdir/${pkgname}-*.pkg.tar.*
sudo rm -rf $build_rootdir/${pkgname}
sudo rm -rf $build_rootdir/pkg
sudo rm -rf $build_rootdir/src

# pushd /usr/bin
# sudo rm -fv "${installer_files[@]}"
# popd
           
sync
rm -f \$(basename $cleanup)         # underlying folder no more exists...
EOF
    chmod +x "$cleanup"
}

_select_calamares_type() {
    local timeout=60
    while true ; do
        read -t $timeout -p "[${timeout}sec] Build with calamares 'test' or 'current'? [current] " >&2
        case "$REPLY" in
            "" | current)
                sed -i packages.x86_64 \
                    -e 's|^#[ ]*calamares_current[ ]*$|calamares_current|' \
                    -e 's|^[ ]*calamares_test[ ]*$|#calamares_test|'
                break
                ;;
            test)
                sed -i packages.x86_64 \
                    -e 's|^[ ]*calamares_current[ ]*$|#calamares_current|' \
                    -e 's|^#[ ]*calamares_test[ ]*$|calamares_test|'
                break
                ;;
        esac
    done
}

_inject_at_pkgbuild() {

    # The $conf file (see below) may contain local bash arrays named CHANGE, INSERT and END.
    # It also contains the file name variable FILE that defines where all changes take place.
    #
    # CHANGE array specifies which packages will be changed to another.
    # INSERT array specifies the place before new packages are added.
    # END array specifies the packages added to the end of the FILE.
    #
    # Example:
    #
    # local CHANGE=("vi|emacs" "less|most")                                      # change vi --> emacs, less --> most
    # local INSERT=("#virtualbox.packages|#for virt-viewer\nspice-vdagent\n")    # add spice-vdagent just before line "#virtualbox packages"
    # local END=(vlc simple-scan)                                                # add some packages to the end of the $FILE
    # local FILE=packages.x86_64

    local conf_places=(
        "$HOME/.config/pkgbuild-inject.conf"
        "$HOME/.pkgbuild-inject.conf"
    )
    local conf

    for conf in "${conf_places[@]}" ; do
        test -r "$conf" && break
    done
    if [ ! -r "$conf" ] ; then
        echo "Info: $FUNCNAME: no inject configuration file at ${conf_places[*]}"
        return
    fi

    source "$conf"

    if [ -z "$FILE" ] ; then
        echo "Error: $FUNCNAME: conf file $conf must set variable: FILE"
        return 1
    fi
    if [ ! -r "$FILE" ] ; then
        echo "Error: $FUNCNAME: conf file $conf refers to a non-existent file in assignment: FILE='$FILE'"
        return 1
    fi

    local xx
    local old new
    local justbefore

    if [ -n "$CHANGE" ] ; then
        for xx in "${CHANGE[@]}" ; do
            echo "Changing: '$xx'" >&2
            old="$(echo "$xx" | cut -d '|' -f 1)"
            new="$(echo "$xx" | cut -d '|' -f 2)"
            sed -i "$FILE" -e "s|^$old$|$new|"
        done
    fi

    if [ -n "$INSERT" ] ; then
        for xx in "${INSERT[@]}" ; do
            echo "Inserting: '$xx'" >&2
            justbefore="$(echo "$xx" | cut -d '|' -f 1)"
            new="$(       echo "$xx" | cut -d '|' -f 2)"
            sed -i $FILE -e "/^$justbefore/i$new"
        done
    fi

    if [ -n "$END" ] ; then
        echo "" >> $FILE
        echo "# Personal packages:" >> $FILE
        for xx in "${END[@]}" ; do
            echo "Appending: '$xx'" >&2
            echo "$xx" >> $FILE
        done
    fi
}

_inject_to__run_before_squashfs_sh() {
    local file=run_before_squashfs.sh
    local keyserver=hkps://keyserver.ubuntu.com

    sed -i $file \
        -e "s|^pacman-key --refresh-keys$|pacman-key --refresh-keys --keyserver $keyserver|"

    return  # TODO !

    if [ 0 -eq 1 ] ; then
        local justbefore="$(grep -P "^mv .* /usr/bin/$" $file)"
        local new=""                                                 # modify chrooted_cleaner_script.sh ??
        sed -i $file -e "/^$justbefore/i$new"
    fi
}

build() {
    ###################################################
    # Check that we have calamares repo properly set up.
    ###################################################

    _check_repo_in_pacman_conf

    ###################################################
    # Create a cleanup script.
    ###################################################

    local build_rootdir="$srcdir/.."
    local cleanup="$build_rootdir/cleanup.bash"
    local basedir=$srcdir/$pkgname

    _create_cleanup_script

    ###################################################
    # Build.
    ###################################################

    cd $basedir

    _inject_at_pkgbuild || return 1
    _inject_to__run_before_squashfs_sh || return 1
    
    _select_calamares_type   # current or test

    sudo pacman -Syyu || return 1
    
    sudo ./fix_permissions.sh
    sudo ./build.sh -v
    cd ../..
    sudo mv $srcdir/$pkgname/out/*.iso .
    sudo chown $LOGNAME *.iso

    sync

    ###################################################
    # Show the result.
    ###################################################

    cd "$build_rootdir"

    echo ""
    echo "#######################################################################"
    echo ""
    echo "The new ISO is here:"
    ls -1 "$build_rootdir"/*.iso
    echo ""
    echo "To clean up all except the ISO, run command:"
    echo "    bash $cleanup"
    echo ""
    echo "#######################################################################"
    echo ""
}

package() {
    echo Done.
}
