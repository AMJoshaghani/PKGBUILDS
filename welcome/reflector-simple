#!/bin/bash
#
# Select pacman mirrors with a simple GUI.
#

REFLECTOR_COUNTRIES="$(reflector --list-countries)"

CodeToCountry() {  # convert country code to country name
    local code="$1"
    echo "$REFLECTOR_COUNTRIES" | grep -w "$code" | sed 's|^\(.*[a-z]\)[ ]*[A-Z][A-Z].*$|\1|'
}
CountryToCode() {  # convert country name to country code
    echo "$REFLECTOR_COUNTRIES" | grep -w "$1" | awk '{print $(NF-1)}'
}


CCCheck() {   # check validity of country code
    case "$1" in
        [A-Z][A-Z]) test -n "$(CodeToCountry "$1")" && return 0 ;;
    esac
    return 1  # fail
}

GetYourCountryCode() {
    local IP code

    IP="$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')"  # ipv4 address
    code="$(geoiplookup "$IP" | sed 's|^.*: \([A-Z][A-Z]\),.*$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }
    code="$(whois "$IP" | grep ^country: | awk '{print $NF}')"
    CCCheck "$code" && {
        echo "$code" ; return
    }

    IP="$(dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')"  # ipv6 address
    code="$(geoiplookup6 "$IP" | sed 's|^.*: \([A-Z][A-Z]\),.*$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }
    code="$(whois "$IP" | grep ^country: | awk '{print $NF}')"
    CCCheck "$code" && {
        echo "$code" ; return
    }

    code="$(curl ipinfo.io 2>/dev/null | grep '"country":' | sed 's|^.*: "\([A-Z][A-Z]\)",$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }

    # net services failed, use local variables, but may be wrong
    code="$(locale | grep ^LC_TIME | cut -d '"' -f 2 | sed 's|^.*_\([A-Z][A-Z]\)\..*$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }
}

ArgsYesNo() {
    local searched="$1"
    shift
    for xx in "$@" ; do
        test "$xx" = "$searched" && { echo "yes" ; return ; }
    done
    echo "no"
}

Main() {
    local verbose=$(ArgsYesNo -v "$@")
    local showlist=$(ArgsYesNo -l "$@")

    test "$verbose" = "yes" && echo "Find your country ..." >&2

    local cc="$(GetYourCountryCode)"
    local countrynames
    local countrycodes
    local xx ix included
    local result countries
    local command
    local ml=/etc/pacman.d/mirrorlist
    local tmpfile=$(mktemp)

    readarray -t countrynames <<< "$(echo "$REFLECTOR_COUNTRIES" | sed 's|^\(.*[a-z]\)[ ]*[A-Z][A-Z].*$|\1|')"
    readarray -t countrycodes <<< "$(echo "$REFLECTOR_COUNTRIES" | awk '{print $(NF-1)}')"

    # Now we have info about supported countries.
    # Next, we ask user to give some countries for mirror ranking.

    command=(yad --form --columns=5 --title="Selecting Arch mirrors")
    local tips=(
        "Select countries to include in mirror ranking"
        "  - select one on more countries"
        "  - closest locations are usually the fastest"
        "  - https is the preferred protocol"
    )
    command+=(--text="<b>${tips[0]}\n${tips[1]}\n${tips[2]}\n${tips[3]}\n\n</b>")

    for ((ix=0; ix < ${#countrycodes[@]}; ix++)) ; do
        test "${countrycodes[$ix]}" = "$cc" && included=true || included=false
        command+=(--field="${countrynames[$ix]}:chk" $included)
    done
    command+=(--separator=" ")
    command+=(--window-icon="configure")
    command+=(--image="preferences-system")
    command+=(--field="<b><i>Feature selections\:</i></b>:LBL" "")
    command+=(--field="Include https mirrors:chk" true)
    command+=(--field="Include http mirrors:chk" false)

    result="$("${command[@]}")"
    test -z "$(echo "$result" | tr -d ' ')" && return      # stop if $result has no words
    result=($(echo "$result"))

    # Now we know which countries to include in mirror ranking.
    # Let's create a proper reflector command.

    command=(reflector)
    # first, add possible reflector-auto configs
    test -r /etc/reflector-auto.conf && command+=($(cat /etc/reflector-auto.conf | grep -P -v "^[ \t]*#|^$"))
    # then, add local configs
    command+=(-a2 -phttps -f10 --sort age --save $tmpfile)

    # then, add countries
    for ((ix=0; ix<${#countrycodes[@]}; ix++)) ; do
        xx="${result[$ix]}"
        test "$xx" = TRUE && command+=(-c "${countrycodes[$ix]}")
    done

    # finally, add feature selections
    test "${result[$((ix++))]}" = "TRUE" && command+=(-p https)
    test "${result[$((ix++))]}" = "TRUE" && command+=(-p http)

    # Now all is ready, so just run the command
    "${command[@]}"

    # Show the result and ask permission to save the mirrorlist
    cat $tmpfile | yad --text-info --tail --width=1000 --height=600 \
                       --title="New $ml" --button=yad-quit:1 --button=" Save to $ml!gtk-save":0 && {
        pkexec bash -c "cp $ml $ml.bak && cp $tmpfile $ml" && \
            echo "New $ml saved." | yad --text-info --width=300 --height=100 --align=center \
                                        --title="Success" --button=yad-quit:0 \
                                        --timeout=5 --timeout-indicator=left
    }

    # cleanup
    rm -f $tmpfile
}

Main "$@"
