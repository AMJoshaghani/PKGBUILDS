#!/bin/bash
#
# Select pacman mirrors with a simple GUI.
#

REFLECTOR_COUNTRIES="$(reflector --list-countries)"

CodeToCountry() {  # convert country code to country name
    local code="$1"
    echo "$REFLECTOR_COUNTRIES" | grep -w "$code" | sed 's|^\(.*[a-z]\)[ ]*[A-Z][A-Z].*$|\1|'
}
CountryToCode() {  # convert country name to country code
    echo "$REFLECTOR_COUNTRIES" | grep -w "$1" | awk '{print $(NF-1)}'
}


CCCheck() {   # check validity of country code
    case "$1" in
        [A-Z][A-Z]) test -n "$(CodeToCountry "$1")" && return 0 ;;
    esac
    return 1  # fail
}

GetYourCountryCode() {
    local IP code

    IP="$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')"  # ipv4 address
    code="$(geoiplookup "$IP" | sed 's|^.*: \([A-Z][A-Z]\),.*$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }
    code="$(whois "$IP" | grep ^country: | awk '{print $NF}')"
    CCCheck "$code" && {
        echo "$code" ; return
    }

    IP="$(dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')"  # ipv6 address
    code="$(geoiplookup6 "$IP" | sed 's|^.*: \([A-Z][A-Z]\),.*$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }
    code="$(whois "$IP" | grep ^country: | awk '{print $NF}')"
    CCCheck "$code" && {
        echo "$code" ; return
    }

    code="$(curl ipinfo.io 2>/dev/null | grep '"country":' | sed 's|^.*: "\([A-Z][A-Z]\)",$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }

    # net services failed, use local variables, but may be wrong
    code="$(locale | grep ^LC_TIME | cut -d '"' -f 2 | sed 's|^.*_\([A-Z][A-Z]\)\..*$|\1|')"
    CCCheck "$code" && {
        echo "$code" ; return
    }
}

ArgsYesNo() {
    local searched="$1"
    shift
    for xx in "$@" ; do
        test "$xx" = "$searched" && { echo "yes" ; return ; }
    done
    echo "no"
}

Main() {
    local verbose=$(ArgsYesNo -v "$@")
    local showlist=$(ArgsYesNo -l "$@")

    test "$verbose" = "yes" && echo "Find your country ..." >&2

    local cc="$(GetYourCountryCode)"
    local countrynames
    local countrycodes
    local xx ix=0
    local result countries
    local command tmpfile=$(mktemp)
    local ml=/etc/pacman.d/mirrorlist

    readarray -t countrynames <<< "$(echo "$REFLECTOR_COUNTRIES" | sed 's|^\(.*[a-z]\)[ ]*[A-Z][A-Z].*$|\1|')"
    readarray -t countrycodes <<< "$(echo "$REFLECTOR_COUNTRIES" | awk '{print $(NF-1)}')"

    countries=$(for xx in "${countrycodes[@]}" ; do
                    case "$xx" in
                        "$cc") echo "true"  ;;
                        *)     echo "false" ;;
                    esac
                    echo "${countrynames[$ix]}"
                    ((ix++))
                done
             )
    readarray -t result <<< \
              $(echo "$countries" | \
                    yad --height=600 --width=400 --list --checklist --title="Selecting pacman mirrors" \
                        --text="<b>Select mirror countries\n  - closest locations recommended\n  - one or more countries</b>" \
                        --column="Included" --column="Country name" \
                    | cut -d '|' -f 2
              )
    test -n "$result" || return

    command=(reflector)
    test -r /etc/reflector-auto.conf && command+=($(cat /etc/reflector-auto.conf | grep -P -v "^[ \t]*#|^$"))
    command+=(-a2 -phttps -f10 --sort age --save $tmpfile)
    for xx in "${result[@]}" ; do
        command+=(-c $(CountryToCode "$xx"))
    done

    "${command[@]}"

    cat $tmpfile | yad --text-info --tail --width=1000 --height=600 \
                       --title="New $ml" --button=yad-quit:1 --button=" Save to $ml!gtk-save":0 && {
        pkexec bash -c "cp $ml $ml.bak && cp $tmpfile $ml" && \
            echo "New $ml saved." | yad --text-info --width=300 --height=100 --align=center \
                                        --title="Success" --button=yad-quit:0 \
                                        --timeout=5 --timeout-indicator=left
    }
    rm -f $tmpfile
}

Main "$@"
