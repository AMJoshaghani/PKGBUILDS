#!/bin/bash
#
# EndeavourOS greeter.
#
# Shows crucial info about the EndeavourOS and its usage.
# Targeted for people new to EndeavourOS (but not new to Linux).
#
# Usage: EndeavourOS-greeter [-f]
# where
#    -f     Forces starting the greeter even if it is disabled in the config.
#
# The config is in file $HOME/.config/EOS-Greeter.conf.
#

EXCLAMATION='&#33;'   # '!'
AND='&#38;'           # '&'


yad_terminal() {
    if [ -z "$TERMINAL_PROG" ] ; then
        # These terminal programs are known not to work with this program:
        # - qterminal
        # - kitty

        # The following terminals are known to work:
        local suitable_terminals="xfce4-terminal konsole gnome-terminal mate-terminal lxterminal terminator tilix termite xterm"
        local arg
        for arg in $suitable_terminals ; do
            if [ -x "/usr/bin/$arg" ] ; then
                export TERMINAL_PROG="/usr/bin/$arg"
                break
            fi
        done
        test -n "$TERMINAL_PROG" || \
            printf "%s\n    %s\n%s" \
                   "Sorry, none of the terminal programs:" \
                   "$suitable_terminals" \
                   "is installed. Some features may not work as expected." \
                | yad --text-info \
                      --title="Warning" --height=200 --width=700 --wrap --button=yad-ok:0
    fi
    echo "$TERMINAL_PROG"
}
export -f yad_terminal

yad_calamares() {
    local prog=/usr/bin/calamares

    if [ -x $prog ] ; then
        bash -c "pkexec $prog -d > /home/liveuser/endeavour-install.log"
    else
        yad --text="$(basename $prog) is not installed!" --title="Warning" --height=100 --width=200 --button=yad-quit:1
    fi
}
export -f yad_calamares

yad_SystemUpdate() {
    local term="$(yad_terminal)"
    test -n "$term" || return 1

    local tmpfile=$(mktemp)
    cat <<EOF > $tmpfile
#!/bin/bash
_xx_main() {
  local updates="\$(checkupdates)"
  test -n "\$updates" && {
      echo "\$updates"
      yay -Syu --noconfirm
  } || {
      echo "No updates."
  }
  read -p "Press ENTER to close this window: "
}
_xx_main
EOF
    chmod +x $tmpfile
    $term -e "bash -c \"echo Checking for software updates... ; $tmpfile ; rm -f $tmpfile\""
}
export -f yad_SystemUpdate

yad_InitializePacmanMirroring() {
    local term="$(yad_terminal)"
    test -n "$term" || return 1

    local tmpfile=$(mktemp)
    cat <<EOF > $tmpfile
#!/bin/bash
haveged -w 1024
pacman-key --init
pacman-key --populate
pacman-key --refresh-keys
pkill haveged
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
/usr/bin/update-mirrorlist || reflector --verbose -phttps -a2 -l15 -f10 --sort age --save /etc/pacman.d/mirrorlist
read -p 'Press ENTER to continue: '
EOF
    chmod +x $tmpfile
    #$term -x bash -c "echo 'Initializing mirroring for pacman...' ; pkexec $tmpfile ; rm -f $tmpfile"
    $term -e "bash -c \"echo 'Initializing mirroring for pacman...' ; pkexec $tmpfile ; rm -f $tmpfile\""
}
export -f yad_InitializePacmanMirroring


INSTALL() {
  local handle="$1"
  local tabnum="$2"
  yad --plug="$handle" --tabnum="$tabnum" \
      --form \
      --columns=2 \
      --image=gtk-save \
      --text="<b>Installing EndeavourOS to disk</b>" --text-align=left \
      --field="Initialize mirroring!!Initialize mirroring system":fbtn       'bash -c yad_InitializePacmanMirroring' \
      --field="START THE INSTALLER!!Start the EndeavourOS installer":fbtn    'bash -c yad_calamares' \
      --field="Release info!!Info about the latest release":fbtn             "$_BROWSER https://endeavouros.com/download" \
      --field="Installation tips!!Installation tips":fbtn                    "$_BROWSER https://endeavouros.com/docs/installation" \
      --field="Troubleshoot!!System Rescue":fbtn                             "$_BROWSER https://endeavouros.com/docs/system-rescue" \
      --field="Partition manager!!Gparted allows examining and managing disk partitions":fbtn    'gparted' \
      &> /dev/null &    
}
# https://endeavouros.com/download

GeneralInfo() {
  local handle="$1"
  local tabnum="$2"
  yad --plug="$handle" --tabnum="$tabnum" \
      --form \
      --columns=3 \
      --image=dialog-question \
      --text="<b>Find your way at the EndeavourOS website!</b>" --text-align=left \
      --field="Web site!!https://endeavouros.com":fbtn                        "$_BROWSER https://endeavouros.com" \
      --field="Download!!Where to download from and how to verify.":fbtn      "$_BROWSER https://endeavouros.com/download" \
      --field="Wiki!!Featured articles":fbtn                                  "$_BROWSER https://endeavouros.com/wiki" \
      --field="News!!News and articles":fbtn                                  "$_BROWSER https://endeavouros.com/posts" \
      --field="Forum!!Ask, comment, and chat in our friendly forum!":fbtn     "$_BROWSER https://forum.endeavouros.com" \
      --field="Donate!!Help us keep EndeavourOS running":fbtn                 "$_BROWSER https://endeavouros.com/donate" \
      &> /dev/null &
}

AfterInstall() {
  local handle="$1"
  local tabnum="$2"
  yad --plug="$handle" --tabnum="$tabnum" \
      --form \
      --columns=2 \
      --image=dialog-information \
      --text="<b>After install tasks</b>" --text-align=left \
      --field="Update System!!Update System Software":fbtn               'bash -c yad_SystemUpdate' \
      --field="Package management!!Manage packages with 'pacman'":fbtn   "$_BROWSER https://endeavouros.com/docs/pacman" \
      --field="AUR $AND yay$EXCLAMATION!!Arch User Repository info":fbtn "$_BROWSER https://endeavouros.com/docs/aur/yay" \
      --field="Hardware and Network!!Get your hardware working":fbtn     "$_BROWSER https://endeavouros.com/docs/hardware-and-network" \
      --field="NVIDIA users$EXCLAMATION!!Use NVIDIA installer":fbtn      "$_BROWSER https://endeavouros.com/docs/hardware-and-network/nvidia-installer" \
      --field="Forum tips!!Help us help you!":fbtn                       "$_BROWSER https://endeavouros.com/docs/forum/how-to-include-systemlogs-in-your-post" \
      &> /dev/null &
}

yad_install() {
    local yadcmd="yad --text-info --title=Installer --wrap --tail --width=400 --height=300 --button=yad-quit:0"

    pacman -Q "$1" >& /dev/null && {
        echo "$1: already installed" | $yadcmd
        return
    }
    while true ; do
        echo "Installing $1 ..."
        pkexec pacman -S --noconfirm "$1"
        echo "Finished."
        break
    done |& $yadcmd
}
export -f yad_install

AddMoreApps() {
  local handle="$1"
  local tabnum="$2"
  yad --plug="$handle" --tabnum="$tabnum" \
      --form \
      --columns=3 \
      --image=system-software-install \
      --text="<b>Install popular apps</b>" --text-align=left \
      --field="LibreOffice!!Office tools (libreoffice-fresh)":fbtn                               'bash -c "yad_install libreoffice-fresh"' \
      --field="Gimp!!Image manipulation":fbtn                                                    'bash -c "yad_install gimp"' \
      --field="Chromium Web Browser!!Web Browser":fbtn                                           'bash -c "yad_install chromium"' \
      --field="Thunderbird E-mail!!E-mail client":fbtn                                           'bash -c "yad_install thunderbird"' \
      --field="Atom!!Text editor + IDE (https://github.com/atom/atom)":fbtn                      'bash -c "yad_install atom"' \
      --field="Visual Studio Code!!Text editor + IDE (https://github.com/microsoft/vscode)":fbtn 'bash -c "yad_install code"' \
      &> /dev/null &
}

GetInvolved() {         # disabled until the web site has more support
  local handle="$1"
  local tabnum="$2"
  yad --plug="$handle" --tabnum="$tabnum" \
      --form \
      --columns=2 \
      --image=face-cool \
      --text="<b>Get involved!</b>" --text-align=left \
      --field="Who we are!!Who we are":fbtn                      "$_BROWSER https://endeavouros.com/info" \
      --field="Bug reports!!Report bugs":fbtn                    "$_BROWSER https://forum.endeavouros.com/c/Arch-based-related-questions/bug-reports" \
      &> /dev/null &    
}

GreeterSettings() {  # not needed anymore; kept as a reference only of how to call bash functions
  local handle="$1"
  local tabnum="$2"
  yad --plug="$handle" --tabnum="$tabnum" \
      --form \
      --columns=1 \
      --image=system-settings \
      --text="<b>Greeter configuration</b>\nConfig file: $GREETER_CONFIG" --text-align=left \
      --field="Do not show the greeter anymore!!Start again with $FULLPROGNAME":fbtn    'bash -c "RunGreeterSettings disabled"' \
      --field="Keep showing the greeter!!I like it\!":fbtn                   'bash -c "RunGreeterSettings enabled"' \
      &> /dev/null &    
}


# Fields explanation:
# --field="ButtonName!IconName!Tooltip":fbtn "Command"

### These variables are required:

_NOTEBOOK_TITLE="EndeavourOS Greeter"        # main window title
_NOTEBOOK_TABS=(                             # names of functions above
    INSTALL
    GeneralInfo
    AfterInstall
    AddMoreApps
    #GetInvolved
)

####################### DO NOT CHANGE ANYTHING AFTER THIS LINE! ######################################################

DIE() {
    while true ; do
        echo "Error: $1."
        Usage
        break
    done | yad --text-info --title="Error" --wrap  --width=700 --height=300 --button=yad-quit:1
    exit 1
}

SetBrowser() {
    local xx
    for xx in xdg-open exo-open firefox chromium ; do  # use one of these browser commands
        if [ -x /usr/bin/$xx ] ; then
            _BROWSER=/usr/bin/$xx        # for showing external links
            return
        fi
    done
    DIE "$FUNCNAME: cannot find a browser"
}

RunGreeterSettings() {
    case "$1" in
        enabled)
            echo "Greeter=enabled"  > "$GREETER_CONFIG"
            ;;
        disabled)
            echo "Greeter=disabled" > "$GREETER_CONFIG"
            echo "To run the greeter again, start a terminal and run $FULLPROGNAME with option '-f'." | \
                yad --text-info --image=dialog-information --text="Re-enabling the greeter:" \
                    --title="How to re-enable greeter" \
                    --geometry=500x200 --wrap \
                    --fontname="Monospace Regular 12" \
                    --button=" I remember!face-angel!I promise":0 >& /dev/null
            ;;
        check)
            test -r "$GREETER_CONFIG" || { echo enabled ; return ; }              # enabled if config does not exist
            grep "^Greeter=" "$GREETER_CONFIG" 2>/dev/null | cut -d '=' -f 2
            ;;
        *)
            DIE "Error: $FUNCNAME: internal error! Please report at https://forum.endeavouros.com."
            ;;
    esac
}

# exports for use in the yad command:
export -f RunGreeterSettings
export GREETER_CONFIG="$HOME/.config/EOS-Greeter.conf"
export FULLPROGNAME="$0"
export TERMINAL_PROG=""

PROGNAME=welcome

PrepareTabs() {
    local handle="$1"
    local xx ix
    ix=1
    for xx in "${_NOTEBOOK_TABS[@]}" ; do
        $xx "$handle" "$((ix++))"
    done
}

SeparateWordsWithSpaces() { # add a space before a capital letter inside a word
    local tabname="$1"

    if [ "$(echo "$tabname" | tr -d '[a-z]')" = "$tabname" ] ; then
        echo "$tabname"           # all capital letters ==> don't change
    else
        echo "$tabname" | sed -e 's|\([A-Z]\)| \1|g' -e 's|^ ||'  # add space before capital letters
    fi
}

Usage() {
    cat <<EOF

Usage: $PROGNAME [options]
Options:
  -f | --force      Re-enable starting the app even if it was disabled.
  --startdelay=X    Wait before actually starting the app.
                    X value syntax is the same as in 'sleep'.
EOF
}

StartHere() {
    ping -c 1 8.8.8.8 >/dev/null || {
        echo "No internet connection! Cannot continue." | \
            yad --text-info --title="Warning" \
                --height=100 --width=300 --justify=center --wrap \
                --button=yad-quit:1
        return 1
    }
    export TERMINAL_PROG="$(yad_terminal)"  # No need to check, most things here work without terminal.

    local force_start=no
    local start_delay=0
    local arg

    for arg in "$@" ; do
        case "$arg" in
            -f | --force)   force_start=yes ;;
            --startdelay=*) start_delay="${arg:13}" ;;
            -*) DIE "unsupported option '$arg'" ;;
            *)  DIE "unsupported parameter '$arg'" ;;
        esac
    done

    if [ "$force_start" = "no" ] ; then
        test "$(RunGreeterSettings check)" != "enabled" && {
            echo "$FULLPROGNAME is disabled. To start it anyway, use option -f"
            return
        }
    fi
    if [ "$start_delay" != "0" ] ; then
        sleep "$start_delay"
    fi

    SetBrowser

    local handle="$(shuf -i 800000-999999 -n 1)"
    local tab tabname
    local notebook   # contains the main yad command

    PrepareTabs "$handle" || DIE "PrepareTabs failed"

    # Create the yad command gradually into an array 'notebook':

    notebook=(yad --notebook --key="$handle" --center --title="$_NOTEBOOK_TITLE")
    for tab in "${_NOTEBOOK_TABS[@]}" ; do
        tabname="$(SeparateWordsWithSpaces "$tab")"
        notebook+=(--tab="$tabname")
    done

    test -x /usr/bin/calamares || notebook+=(--active-tab=2)

    notebook+=(--button=" See you later!face-cool!Keep greeter enabled":0)
    notebook+=(--button=" Don't show me anymore!face-crying!Disable the greeter":1)

    "${notebook[@]}"

    case "$?" in
        0) RunGreeterSettings enabled ;;
        1) RunGreeterSettings disabled ;;
    esac
}

StartHere "$@"
