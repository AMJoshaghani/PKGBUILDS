#!/bin/bash
#
# Updates NVIDIA database for nvidia-installer and nvidia-installer-dkms.
#
# https://www.nvidia.com/en-us/drivers/unix/
# https://download.nvidia.com/XFree86/Linux-x86_64/435.21/README/supportedchips.html
# https://download.nvidia.com/XFree86/Linux-x86_64/435.21/README/index.html

GetNvidiaBranch() {
    local string="$1"
    local series="$2"
    local data="$(wget -q --timeout=10 -O- https://www.nvidia.com/en-us/drivers/unix)"
    test -n "$data" || DIE "$FUNCNAME: fetching branch '$string' failed."
    if [ -n "$series" ] ; then
        echo "$data" | grep "$string" | grep "$series" | head -n 1 | sed 's|^.*">\([0-9\.]*\)<.*$|\1|'
    else
        echo "$data" | grep "$string" | head -n 1 | sed 's|^.*">\([0-9\.]*\)<.*$|\1|'
    fi
}

GetNvidiaIds() {
    local branch="$1"
    local ids="$(wget -q --timeout=10 -O- https://download.nvidia.com/XFree86/Linux-x86_64/$branch/README/supportedchips.html)"
    test -n "$ids" || DIE "$FUNCNAME: fetching ids from branch '$branch' failed."
    ids="$(echo "$ids" | sed -n '1,/.*NVIDIA Tesla GPUs.*/p' | grep "</td>" | grep "<td>")"
    ids="$(echo "$ids" | grep -P "<td>[0-9A-F][0-9A-F][0-9A-F ]*</td>" | sed -e 's|<td>||' -e 's|</td>||')"
    ids="$(echo "$ids" | tr '[:upper:]' '[:lower:]')"
    echo "$ids"
}

NvidiaIdsCommon() {
    local string="$1"
    local series="$2"
    local branch="$(GetNvidiaBranch "$string" "$series")"
    test -n "$branch" || DIE "$FUNCNAME: GetNvidiaBranch failed."
    local ids="$(GetNvidiaIds "$branch")"
    test -n "$ids" || DIE "$FUNCNAME: GetNvidiaIds failed."
    Info "$string: $branch"
    echo "$ids"
}

NvidiaIdsLatest() {
    local ids="$(NvidiaIdsCommon "Latest Long Lived Branch")"
    if [ -z "$ids" ] ; then
        ids="$(NvidiaIdsCommon "Latest Short Lived Branch")"
        if [ -z "$ids" ] ; then
            DIE "$FUNCNAME: NvidiaIdsCommon failed."
        fi
    fi
    echo "$ids"
}

NvidiaIdsLegacy() {
    local series="$legacy_series.xx series"
    local ids="$(NvidiaIdsCommon "Latest Legacy GPU version" "$series")"
    test -n "$ids" || DIE "$FUNCNAME: NvidiaIdsCommon failed for Legacy $series."
    echo "$ids"
}

echo2()   { echo "$@" >&2 ; }
DIE()     { echo2 "Error: $1" ; exit 1 ; }
Info()    { test "$show_additional_info" = "yes" && echo2 "Info: $@" ; }

Options() {
    local arg
    for arg in "$@" ; do
        case "$arg" in
            -v | --verbose)
                show_additional_info=yes ;;
            --tmpdb)
                targetdir="/tmp" ;;
            -*)
                DIE "unsupported option '$arg'" ;;
            *)
                DIE "unsupported parameter '$arg'" ;;
        esac
    done
}

ExeEnv() {
    case "$(echo "${BASH_SOURCE[@]}")" in
        *rogalmic.bash-debug*)  exe_env=vscode ;;
        */usr/bin/bashdb*)      exe_env=bashdb ;;
        *)                      exe_env=run ;;
    esac
}

CreateNvidiaDb()
{
    local PROGNAME=nvidia-installer-update-db
    local exe_env=""
    local show_additional_info=no                       #  "no" is the default, "yes" is TESTING!
    local targetdir=/var/lib/pci                        # db directory

    Options "$@"

    local legacy_series="390"                           # this may change some day!
    local legacy_available=yes                          # -"-

    local target_latest=$targetdir/nvidia.ids           # db (list of ids) for driver type 'nvidia'
    local target_legacy=$targetdir/nvidia-${legacy_series}xx.ids     # db (list of ids) for legacy driver type 'nvidia-NNNxx'
    local bakdir=$targetdir/ORIG.BAK                    # original db is stored into this directory, if it exists
    local nvidia_ids_latest
    local nvidia_ids_legacy
    local tmpfile1
    local tmpfile2
    local sudo_commands=":"                             # collect required root commands here
    local readme="NVIDIA db generated by $PROGNAME at $(date +%Y-%m-%d)."
    local xx

    # check that legacy driver is available either in the repos or AUR
    if [ -z "$(yay -S -s nvidia -s dkms -s "$legacy_series"xx -q)" ] ; then
        legacy_available=no  # not available
    fi

    echo2 "Fetching NVIDIA graphics card ids from nvidia.com ..."

    nvidia_ids_latest="$(NvidiaIdsLatest)"
    test -n "$nvidia_ids_latest" || DIE "cannot fetch latest NVIDIA ids"

    if [ "$legacy_available" = "yes" ] ; then
        nvidia_ids_legacy="$(NvidiaIdsLegacy)"
        test -n "$nvidia_ids_legacy" || DIE "cannot fetch legacy NVIDIA Legacy $legacy_series.xx ids"
    fi

    # Data is fetched from nvidia.com.
    # Now save the data into the local database.


    tmpfile1=$(mktemp)
    echo "$nvidia_ids_latest" | awk '{print $1}' | sort | uniq > $tmpfile1

    if [ "$legacy_available" = "yes" ] ; then
        tmpfile2=$(mktemp)
        echo "$nvidia_ids_legacy" | awk '{print $1}' | sort | uniq > $tmpfile2
    fi

    sudo_commands+=" ; mkdir -p $targetdir"
    sudo_commands+=" ; if [ ! -d $bakdir ] ; then mkdir -p $bakdir ; cp -a $targetdir/*.ids $bakdir >& /dev/null ; fi"
    sudo_commands+=" ; mv $tmpfile1 $target_latest"
    if [ "$targetdir" != "/tmp" ] ; then
        sudo_commands+=" ; chown root:root $target_latest"
    fi
    sudo_commands+=" ; chmod 0644 $target_latest"
    if [ "$legacy_available" = "yes" ] ; then
        sudo_commands+=" ; mv $tmpfile2 $target_legacy"
        if [ "$targetdir" != "/tmp" ] ; then
            sudo_commands+=" ; chown root:root $target_legacy"
        fi
        sudo_commands+=" ; chmod 0644 $target_legacy"
    else
        sudo_commands+=" ; if [ -r $target_legacy ] ; then mv -f $target_legacy $target_legacy.unsupported ; fi"
    fi
    sudo_commands+=" ; echo $readme > $targetdir/README.txt"

    echo2 "Adding NVIDIA graphics card ids to the local database."

    if [ "$targetdir" = "/tmp" ] ; then
        # temporary files used, no sudo needed
        bash -c "$sudo_commands"
    else
        # Now we need elevated privileges.
        sudo bash -c "$sudo_commands"
    fi
}

CreateNvidiaDb "$@"    # program starts here
