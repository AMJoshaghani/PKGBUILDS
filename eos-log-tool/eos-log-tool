#!/bin/bash
#
# Tool for generating various logs and sending them to the internet.
#
# NOTE: Even though much effort for removing personal information
#       has been made, logs may still contain some personal information.
#       Thus the user may create an additional filter for removing
#       personal data from the logs.
#       See the end of function "RemovePersonalData"
#       and file "$DIR_OF_CONFIG/eos-log-tool-filter.bash" below.
#

Breakpoint() {
    :;
}

source /usr/share/endeavouros/scripts/eos-script-lib-yad || exit 1

export -f eos_yad

MsgOld() {
    local msg="$1"
    local title="$2"
    shift 2
    local width=$((${#msg} * 10))
    local highlimit=650
    local lowlimit=200

    test $width -gt $highlimit && width=$highlimit
    test $width -lt $lowlimit  && width=$lowlimit

    echo "$msg" | eos_yad --text-info --title="$title" --formatted --wrap \
                          --width=$width --height=100 --button=yad-quit "$@"
}
Msg() {
    local msg="$1"
    local title="$2"
    shift 2
    local cmd=(
        eos_yad --form --title="$title" --text="$msg"
        --image=user-info --button=yad-quit "$@"
    )
    "${cmd[@]}"
}
ErrorMsg() {
    local msg="$1"
    Msg "$msg" "Error"
}
WarningMsg() {
    local msg="$1"
    Msg "$msg" "Warning"
}

Header() { printf "%s\n\n" "#################### $* ########################" ; }
Footer() { printf "\n\n" ; }

Cmd() {
    local cmd="$1"

    echo "==> Handling '$*'" >&2

    if [ "$cmd" = "cat" ] ; then
        if [ "${2::1}" = "." ] ; then
            cd                  # $HOME stuff: go to $HOME to hide unnecessary info
        fi
    fi

    case "$cmd" in
        pkexec)
            shift
            SUDO_CMDS+=" ; echo '$(Header "$@")' >> $FILE_OF_LOGS"
            SUDO_CMDS+=" ; $* >> $FILE_OF_LOGS"
            SUDO_CMDS+=" ; echo '$(Footer)' >> $FILE_OF_LOGS"
            return
            ;;
        FuncCall)
            # params: FuncCall "func"
            Header "$2" >> $FILE_OF_LOGS
            "$2"        >> $FILE_OF_LOGS
            Footer      >> $FILE_OF_LOGS
            return
            ;;
        "")
            echo "==> $FUNCNAME: empty command!" >&2
            return
            ;;
        *)
            Header "$@" >> "$FILE_OF_LOGS"
            if [ -x /usr/bin/"$cmd" ] ; then
                "$@" 2>/dev/null >> "$FILE_OF_LOGS"
            else
                WarningMsg "Command '$cmd' not found."
                echo "Sorry, command '$cmd' not found." >> "$FILE_OF_LOGS"
            fi
            Footer >> "$FILE_OF_LOGS"
            ;;
    esac
}

SendToInternet() {
    echo "==> Sending $FILE_OF_LOGS to a pastebin service." >&2

    local logdata="$(cat "$FILE_OF_LOGS")"

    if [ -z "$logdata" ] ; then
        ErrorMsg "No logs found!"
        return 1
    fi

    local exitcode=0
    local url="$(echo "$logdata" | eos-sendlog)"
    exitcode=$?
    if [ $exitcode -ne 0 ] ; then
        ErrorMsg "Sending log data failed!"
        exit 1
    fi
    case "$url" in
        "") local logfilesize=$(stat -c %s "$FILE_OF_LOGS")
            if [ $logfilesize -gt $EOS_LOG_TOOL_MAX_LOG_SIZE ] ; then
                ErrorMsg "Sending log data failed (returned empty URL)!\nLog size $logfilesize bytes too large?"
            else
                ErrorMsg "Sending log data failed (returned empty URL)!"
            fi
            exit 1
            ;;
        [hH][tT][tT][pP]://* | [hH][tT][tT][pP][sS]://*)
            ;;
        *)  ErrorMsg "Sending log data failed (returned invalid URL)!"
            exit 1
            ;;
    esac
    echo "$(date '+%Y-%m-%d %H:%M:%s'): $url" >> "$DIR_OF_CONFIG"/url-list.txt
    if [[ -x /usr/bin/xclip ]]; then
        eos_yad --text="$url" --button="cancel":1 --button="copy":0 --title="Result URL" --width=300
        test $? -eq 0 && echo "$url" | xclip -i -selection clipboard
    else
        echo "$url" | eos_yad --text-info --width=300 --title="Result URL"
    fi
    rm -f "$FILE_OF_LOGS" "$FILE_OF_LOGS.bak"
    sendToInternet=yes
}

UserNames() {
    local low="$1"     # lowest  user id number
    local high="$2"    # highest user id number
    local nr
    local user users=""

    for nr in $(cat /etc/passwd | cut -d ':' -f 3) ; do
        if [ $nr -ge $low ] && [ $nr -le $high ] ; then
            user=$(grep ":$nr:" /etc/passwd | cut -d ':' -f 1)
            if [ -z "$users" ] ; then
                users="$user"
            else
                users+=" $user"
            fi
        fi
    done
    echo "$users"
}

RemovePersonalData() {
    if [ ! -r "$FILE_OF_LOGS" ] ; then
        ErrorMsg "Logs not found!"
        exit 1
    fi
    cp -a "$FILE_OF_LOGS" "$FILE_OF_LOGS.bak"
    local user
    local ssid="foobarfoobarfoobar"
    local mac="foobarfoobarfoobar"

    if [ -x /usr/bin/iwgetid ] ; then
        ssid=$(iwgetid -r)
        mac=$(iwgetid -ra)
    fi

    # hide real user names (that are found in /etc/passwd) from logs
    for user in $(UserNames 1000 50000) ; do
        sed -i "$FILE_OF_LOGS" \
            -e 's| '$user' | _user_ |g' \
            -e 's|/'$user'/|/_user_/|g' \
            -e 's|"'$user'"|"_user_"|g' \
            -e 's|'$user:$user'|_user_:_user_|g' \
            -e 's|/'$user'|/_user_|g' \
            -e 's| '$user'$| _user_|g' \
            -e 's| '$user':| _user_:|g' \
            -e "s|'"$user"'|'_user_'|g" \
            -e 's| '$user'\.| _user_.|g' \
            -e 's|:'$user' |:_user_ |g' \
            -e 's|:'$user')|:_user_)|g' \
            -e 's| '$user')| _user_)|g' \
            -e 's| '$user'(| _user_(|g' \
            -e "s|‘$user:|‘_user_:|g" \
            -e "s|\[$user\]|[_user_]|g" \
            -e 's|'$user'"|_user_"|g' \
            -e "s|LOGNAME=$user|LOGNAME=_user_|" \
            -e "s|USERNAME=$user|USERNAME=_user_|" \
            -e "s|USER=$user|USER=_user_|" \
            -e 's| with address .*\.$| with address _ip_address_.|' \
            -e 's| new address record for .* on \(.*\)$| new address record for _ip_address on \1|' \
            -e "s| policy: set '.*' (\(.*\)) as default for | policy: set '_ssid_' (\1) as default for |" \
            -e "s| connection '.*' | connection '_ssid_' |" \
            -e "s|set MAC address to .* (|set MAC address to _mac_address (|" \
            -e "s| associate with .* (| associate with _mac_address (|" \
            -e "s| access point '.*' | access point '_ssid_' |" \
            -e "s|'ssid' value '.*'$|'ssid' value '_ssid_'|" \
            -e "s|(SSID='.*' |(SSID='_ssid_' |" \
            -e 's| wireless network ".*"$| wireless network "_ssid_"|' \
            -e 's|192\.168\.[0-9]*\.[0-9]*|_ip_address_|' \
            -e 's| fe80::[0-9a-f:]*\([ \.]\)|_ip_address_\1|' \
            -e "s|'$ssid'|'_ssid_'|" \
            -e "s|$mac|_mac_address|"
            
    done

    # hide hostname from logs
    sed -i "$FILE_OF_LOGS" \
        -e 's| '$HOSTNAME' | _hostname_ |g' \
        -e 's|"'$HOSTNAME'"|"_hostname_"|g' \
        -e 's|<'$HOSTNAME'>|<_hostname_>|g' \
        -e 's|='$HOSTNAME' |=_hostname_ |g' \
        -e 's| '$HOSTNAME'\.| _hostname_.|g' \
        -e 's| '$HOSTNAME'"| _hostname_"|g' \
        -e 's|-'$HOSTNAME':|-_hostname_:|g' \
        -e "s|'"$HOSTNAME"'|'_hostname_'|g"

    # User may create an additional filter for removing
    # any remaining personal data from the logs.
    local filter="$DIR_OF_CONFIG"/${progname}-filter.bash
    if [ -r "$filter" ] ; then
        # $filter refers to user's own bash script
        # $FILE_OF_LOGS is the file containing all gathered logs
        bash "$filter" "$FILE_OF_LOGS"
    fi
    removePersonalInfo=yes

    echo "==> Personal data removed." >&2
}

IsInstalled() { /usr/bin/pacman -Q "$1" &> /dev/null ; }

ForeignPkgInfo() {
    local pkg ver desc
    local data ix l2

    readarray -t data <<< $(LANG=C pacman -Qmi | grep -P '^Name|^Version|^Description')

    for ((ix=0; ix<${#data[@]}; ix=ix+3 )) ; do
        pkg="$( echo "${data[ix]}"   | sed 's|[^:]*: ||')"
        ver="$( echo "${data[ix+1]}" | sed 's|[^:]*: ||')"
        desc="$(echo "${data[ix+2]}" | sed 's|[^:]*: ||')"
        
        printf "%s|%s|%s\n" "$pkg" "$ver" "$desc"
    done | column -t -s "|"
}

Local_ShowForeignPackages() {
    Cmd FuncCall ForeignPkgInfo            # "$xx" "$line"    # does special handling
}

Local_ShowEosInstallLog() {
    local install_logs=(
        /var/log/endeavour-install.log
        /var/log/Calamares.log
        /home/liveuser/endeavour-install.log
        $HOME/endeavour-install.log
    )
    local fname

    for fname in "${install_logs[@]}" ; do
        if [ -r "$fname" ] ; then
            Cmd cat "$fname"
            return
        fi
    done
    if [ ! -r $fname ] ; then
        WarningMsg "no EndeavourOS install log found!"
        echo "Sorry, EndeavourOS install log was not found." >> "$FILE_OF_LOGS"
    fi
}

GetNameAndVersion() { pacman -Q "$1" ; }

Main()
{
    local progname=eos-log-tool

    Breakpoint

    case "$1" in
        --changelog)
            $(eos_select_browser) $(eos-github2gitlab https://github.com/endeavouros-team/PKGBUILDS/commits/master/$progname)
            return
            ;;
    esac
    local FILE_OF_LOGS=$HOME/$progname.logs
    local FILE_OF_LOGS2="\$HOME/$progname.logs"
    local DIR_OF_CONFIG="$HOME/.config/$progname"
    local DIR_OF_CONFIG2="\$HOME/.config/$progname"
    local SUDO_CMDS=":"

    local EOS_LOG_TOOL_JOURNAL_OPTS="--since '20 minutes ago'"
    local EOS_LOG_TOOL_MAX_LOG_SIZE=500000

    if [ -r /etc/$progname.conf ] ; then
        source /etc/$progname.conf    # may change option values, e.g. for EOS_LOG_TOOL_JOURNAL_OPTS
    fi

    mkdir -p "$DIR_OF_CONFIG"

    rm -f "$FILE_OF_LOGS"

    local FieldInfo1=(
        # Name                                   Selected    Installed  Tip                                                                    Command
        # ----                                   --------    ---------  ---                                                                    -------

        "System journal, most recent"            "true"     ""         "Journal from the most recent boot"                                     "pkexec journalctl -b -0"
        "System journal, 2nd most recent"        ""         ""         "Journal from the second most recent boot"                              "pkexec journalctl -b -1"
        "System journal, 3rd most recent"        ""         ""         "Journal from the third most recent boot"                               "pkexec journalctl -b -2"
        "System journal, user defined options"   ""         ""         "Journal by a user defined value in file <tt>/etc/$progname.conf</tt>"  "pkexec journalctl $EOS_LOG_TOOL_JOURNAL_OPTS"
        "System boot-up performance statistics"  ""         ""         "Time that running units took to initialize"                            "systemd-analyze blame"
        "Information about the PCI devices"      ""         ""         "Information related to PCI devices"                                    "lspci -vnn"
        "Information about the USB devices"      ""         ""         "Information related to USB devices"                                    "lsusb"
        "Information about hardware (inxi)"      "true"     "inxi"     "Information about hardware and software using <tt>inxi</tt>"           "inxi -Fxxc0z"
        "Information about hardware (hwinfo)"    ""         ""         "Summary of hardware using <tt>hwinfo</tt>"                             "hwinfo --short"
        "EndeavourOS install log"                ""         ""         "The log about the install of EndeavourOS"                              "Local_ShowEosInstallLog"
        "X session errors"                       ""         ""         "Lists X session errors"                                                "cat ~/.xsession-errors"
        "Xorg log"                               ""         ""         "Log about Xorg events"                                                 "cat /var/log/Xorg.0.log"
        "Display manager log"                    ""         "lightdm"  "Display manager (lightdm) log"                                         "pkexec cat /var/log/lightdm/lightdm.log"
        "Display manager log, X related"         ""         "lightdm"  "Display manager log, X server related"                                 "pkexec cat /var/log/lightdm/x-0.log"
        "Grub configuration file"                ""         "grub"     "Grub (bootloader) configuration file"                                  "pkexec cat /boot/grub/grub.cfg"
        "Filesystem mountpoints (fstab)"         ""         ""         "Static information about the filesystem and mointpoints"               "cat /etc/fstab"
        "Disks and partitions (lsblk)"           ""         ""         "List information about disks, partitions, labels, uuids, ..."          "lsblk -fm"
        "Disks and partitions (fdisk)"           ""         ""         "Another list of disk and partition information"                        "pkexec fdisk -l"
        "Pacman configuration file"              "true"     ""         "Pacman (package manager) configuration file"                           "cat /etc/pacman.conf"
        "Foreign packages"                       "true"     ""         "List foreign (=not from pacman repositories) packages"                 "Local_ShowForeignPackages"
    )
    local FieldInfo=()
    local offset_name=0
    local offset_selected=1
    local offset_installed=2
    local offset_tip=3
    local offset_command=4

    local ButtonInfo=(
        # Name                       Tip                                   Command
        # ----                       ---                                   -------

        "Save logs locally"          "Save logs to a local file"           ""                # 4
        "Send logs to the internet"  "Send selected logs to the internet"  "SendToInternet"  # 6
    )

    local cmds=()
    local sendToInternet=no
    local removePersonalInfo=no
    local xx
    local helptext=""
    local name selected installed tip command
    local ix jx

    helptext+="<i><b>$(GetNameAndVersion $progname)</b></i>\n\n"
    helptext+="Select the logs you want to save locally and optionally share to the internet. \n"
    helptext+="Logs will will be saved to file <b>$FILE_OF_LOGS2</b>.\n"
    helptext+="If you share, you'll receive a URL which refers to the shared page.\n\n"
    helptext+="Note1: Personal data will <i>always</i> be removed from the logs. \n"
    helptext+="Note2: A list of received URLs is stored in folder <b>$DIR_OF_CONFIG2</b>. \n"

    local code_cancel=1
    local code_localsave=4
    local code_send_to_internet=6
    local code_close_window=252

    local log_tool_cmd=(
        eos_yad
        --scroll
        --columns=2
        --form
        --title="EndeavourOS log tools"
        --text="$helptext"
        --height=550
        # --width=500
        --image=dialog-question
        --button="Cancel!!Cancel this operation":$code_cancel
        --button="Save logs locally!!Save the logs to file $FILE_OF_LOGS2":$code_localsave
        --button="Share logs to the internet!!Send the logs to a pastebin service":$code_send_to_internet
    )

    # Skip entries that don't have the app installed

    for ((ix=0; ix < ${#FieldInfo1[@]}; ix+=5)) ; do
        installed="${FieldInfo1[$((ix+2))]}"
        if [ -n "$installed" ] ; then
            IsInstalled "$installed" || continue
        fi
        FieldInfo+=("${FieldInfo1[$((ix + offset_name))]}")
        FieldInfo+=("${FieldInfo1[$((ix + offset_selected))]}")
        FieldInfo+=("${FieldInfo1[$((ix + offset_installed))]}")
        FieldInfo+=("${FieldInfo1[$((ix + offset_tip))]}")
        FieldInfo+=("${FieldInfo1[$((ix + offset_command))]}")
    done

    # Add entries to the yad command

    for ((ix=0; ix < ${#FieldInfo[@]}; ix+=5)) ; do
        name="${FieldInfo[$((      ix + offset_name ))]}"
        selected="${FieldInfo[$((  ix + offset_selected ))]}"
        installed="${FieldInfo[$(( ix + offset_installed ))]}"
        tip="${FieldInfo[$((       ix + offset_tip ))]}"
        command="${FieldInfo[$((   ix + offset_command ))]}"
        
        [ -z "$selected" ] && selected=false

        if [ -n "$installed" ] ; then
            IsInstalled "$installed" || continue
        fi
        log_tool_cmd+=(--field="$name!$tip":chk $selected)
    done

    Breakpoint

    # Run the yad command

    local result retval
    result=$("${log_tool_cmd[@]}")
    retval=$?
    case "$retval" in
        $code_cancel | $code_close_window)
            return
            ;;
        $code_localsave | $code_send_to_internet)
            ;;
        *)
            echo "Invalid return code from yad!" >&2
            ;;
    esac
    if [ -z "$result" ] ; then
        echo "No result!" >&2
        return 1
    fi

    # Now $retval is either $code_localsave or $code_send_to_internet

    # From the command result, analyze which subcommands should be executed
    local true_indexes=()
    jx=1
    for ((ix=0; ix < ${#FieldInfo[@]}; ix+=5)) ; do
        xx="$(echo "$result" | cut -d'|' -f $jx)"
        case "$xx" in
            true | TRUE) true_indexes+=($ix) ;;
        esac
        ((jx++))
    done

    Breakpoint

    for ((ix=0; ix < ${#true_indexes[@]}; ix++)) ; do
        jx=${true_indexes[$ix]}
        command="${FieldInfo[$((jx + offset_command))]}"
        case "$command" in
            Local_*)    ;;
            "pkexec "*) command="$(echo "$command" | sed 's|^pkexec |Cmd pkexec |')" ;;
            *)          command="$(echo "$command" | sed 's|^|Cmd |')" ;;
        esac
        $command
        cmds+=("$command")
    done

    Breakpoint

    if [ "$SUDO_CMDS" != ":" ] ; then
        pkexec bash -c "$SUDO_CMDS"
    fi

    # All logs are now saved into a file.

    RemovePersonalData    # always remove personal data!

    Breakpoint

    case "$retval" in
        $code_localsave)
            Msg "Log file <tt>$FILE_OF_LOGS2</tt> created." "Info" ;;
        $code_send_to_internet)
            SendToInternet ;;
    esac
}

Main "$@"
